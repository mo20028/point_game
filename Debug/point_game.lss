
point_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002474  00002508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800086  00800086  0000252e  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f1c  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000857c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000932c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009719  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ee7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_1>
       8:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__vector_2>
       c:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <main>
      8a:	0c 94 38 12 	jmp	0x2470	; 0x2470 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include  "CLCD_config.h"
#include  "CLCD_interface.h"
#include  "CLCD_pravite.h"

void CLCD_voidSendCommand(u8 copy_u8command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs low for command*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
#if mode==0

	/*set data value*/
	setportvalue(CLCD_DATA_PORT, copy_u8command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 c9 09 	call	0x1392	; 0x1392 <setportvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	89 e1       	ldi	r24, 0x19	; 25
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);


#endif
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs high for data*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
#if mode==0
	/*set data value*/
	setportvalue(CLCD_DATA_PORT, copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 c9 09 	call	0x1392	; 0x1392 <setportvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a e7       	ldi	r20, 0x7A	; 122
     cdc:	53 e4       	ldi	r21, 0x43	; 67
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	89 e1       	ldi	r24, 0x19	; 25
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 b7 08 	call	0x116e	; 0x116e <setbitvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
#endif
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:
void CLCD_voidInit(u8 copy_u8mode)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2f 97       	sbiw	r28, 0x0f	; 15
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	8f 87       	std	Y+15, r24	; 0x0f
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a4 e2       	ldi	r26, 0x24	; 36
     dda:	b2 e4       	ldi	r27, 0x42	; 66
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	9c 87       	std	Y+12, r25	; 0x0c
     de0:	ad 87       	std	Y+13, r26	; 0x0d
     de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de4:	6b 85       	ldd	r22, Y+11	; 0x0b
     de6:	7c 85       	ldd	r23, Y+12	; 0x0c
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a e7       	ldi	r20, 0x7A	; 122
     df2:	53 e4       	ldi	r21, 0x43	; 67
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8f 83       	std	Y+7, r24	; 0x07
     dfe:	98 87       	std	Y+8, r25	; 0x08
     e00:	a9 87       	std	Y+9, r26	; 0x09
     e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e8       	ldi	r20, 0x80	; 128
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e18:	88 23       	and	r24, r24
     e1a:	2c f4       	brge	.+10     	; 0xe26 <CLCD_voidInit+0x68>
		__ticks = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <CLCD_voidInit+0xe6>
	else if (__tmp > 65535)
     e26:	6f 81       	ldd	r22, Y+7	; 0x07
     e28:	78 85       	ldd	r23, Y+8	; 0x08
     e2a:	89 85       	ldd	r24, Y+9	; 0x09
     e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	3f ef       	ldi	r19, 0xFF	; 255
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	57 e4       	ldi	r21, 0x47	; 71
     e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	4c f5       	brge	.+82     	; 0xe90 <CLCD_voidInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <CLCD_voidInit+0xc8>
     e68:	89 e1       	ldi	r24, 0x19	; 25
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <CLCD_voidInit+0xb6>
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <CLCD_voidInit+0xaa>
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <CLCD_voidInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <CLCD_voidInit+0xf2>
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
	{
	/*wait for more than 40 ms*/
	_delay_ms(41);

	/*function set command : 2line ,5*8 front size*/
	CLCD_voidSendCommand(0b00111000);
     eb8:	88 e3       	ldi	r24, 0x38	; 56
     eba:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*diplaly on off control,display enable,cursor enable,blink enable*/
	CLCD_voidSendCommand(0b00001100);
     ebe:	8c e0       	ldi	r24, 0x0C	; 12
     ec0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(1);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
		/*clear display*/
		CLCD_voidSendCommand(1);
	}
#endif

}
     eca:	2f 96       	adiw	r28, 0x0f	; 15
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <CLCD_voidSendString>:
void CLCD_voidSendString(const char* copy_string)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <CLCD_voidSendString+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <CLCD_voidSendString+0x24>
	while(*copy_string !='\0')
	{
		CLCD_voidSendData(*copy_string);
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	80 81       	ld	r24, Z
     ef2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		copy_string++;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void CLCD_voidSendString(const char* copy_string)
{
	while(*copy_string !='\0')
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	80 81       	ld	r24, Z
     f06:	88 23       	and	r24, r24
     f08:	89 f7       	brne	.-30     	; 0xeec <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*copy_string);
		copy_string++;

	}

}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <CLCD_voidGOTOXY>:
void CLCD_voidGOTOXY(u8 copy_u8xpostion,u8 copy_u8ypostion)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <CLCD_voidGOTOXY+0x6>
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8xpostion==0)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 23       	and	r24, r24
     f28:	19 f4       	brne	.+6      	; 0xf30 <CLCD_voidGOTOXY+0x1c>
	{
		/*the location at the frist line */
		Local_u8Address=copy_u8ypostion;
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <CLCD_voidGOTOXY+0x28>
	}
	else if(copy_u8xpostion==1)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	19 f4       	brne	.+6      	; 0xf3c <CLCD_voidGOTOXY+0x28>
	{
		/*the location at the second line*/
		Local_u8Address=0x40+copy_u8ypostion;
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	80 5c       	subi	r24, 0xC0	; 192
     f3a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit 7 in DDRAM address and send command*/
	CLCD_voidSendCommand(Local_u8Address+128);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 58       	subi	r24, 0x80	; 128
     f40:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <CLCD_voidWrite_SpacialC>:

void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	6d 83       	std	Y+5, r22	; 0x05
     f6a:	4e 83       	std	Y+6, r20	; 0x06
     f6c:	2f 83       	std	Y+7, r18	; 0x07
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(address+64);
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	80 5c       	subi	r24, 0xC0	; 192
     f86:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
     f8a:	19 82       	std	Y+1, r1	; 0x01
     f8c:	0e c0       	rjmp	.+28     	; 0xfaa <CLCD_voidWrite_SpacialC+0x5a>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	fc 01       	movw	r30, r24
     f9a:	e2 0f       	add	r30, r18
     f9c:	f3 1f       	adc	r31, r19
     f9e:	80 81       	ld	r24, Z
     fa0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
	CLCD_voidSendCommand(address+64);
	for(u8 i=0;i<8;i++)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	78 f3       	brcs	.-34     	; 0xf8e <CLCD_voidWrite_SpacialC+0x3e>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
	}
	/*return to dd ram*/
	CLCD_voidGOTOXY(copy_u8xpos	, copy_u8ypos);
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>

	CLCD_voidSendData(copy_u8Blocknum);
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

}
     fbe:	27 96       	adiw	r28, 0x07	; 7
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <CLCD_voidNumber>:
void CLCD_voidNumber(u32 copy_u32Number)
{
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	61 97       	sbiw	r28, 0x11	; 17
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	6e 87       	std	Y+14, r22	; 0x0e
     fea:	7f 87       	std	Y+15, r23	; 0x0f
     fec:	88 8b       	std	Y+16, r24	; 0x10
     fee:	99 8b       	std	Y+17, r25	; 0x11

	/*create arr of char from 11 element*/
	char buf[12];  // max 10 digits + null terminator
	uint8_t i = 10;
     ff0:	8a e0       	ldi	r24, 0x0A	; 10
     ff2:	89 83       	std	Y+1, r24	; 0x01
	buf[i--] = '\0';
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	ce 01       	movw	r24, r28
     ffc:	02 96       	adiw	r24, 0x02	; 2
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	10 82       	st	Z, r1
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	81 50       	subi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01
	do {
		buf[i--] = copy_u32Number % 10 + '0';
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	08 2f       	mov	r16, r24
    1010:	10 e0       	ldi	r17, 0x00	; 0
    1012:	8e 85       	ldd	r24, Y+14	; 0x0e
    1014:	9f 85       	ldd	r25, Y+15	; 0x0f
    1016:	a8 89       	ldd	r26, Y+16	; 0x10
    1018:	b9 89       	ldd	r27, Y+17	; 0x11
    101a:	2a e0       	ldi	r18, 0x0A	; 10
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	0e 94 df 11 	call	0x23be	; 0x23be <__udivmodsi4>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	28 2f       	mov	r18, r24
    1030:	20 5d       	subi	r18, 0xD0	; 208
    1032:	ce 01       	movw	r24, r28
    1034:	02 96       	adiw	r24, 0x02	; 2
    1036:	fc 01       	movw	r30, r24
    1038:	e0 0f       	add	r30, r16
    103a:	f1 1f       	adc	r31, r17
    103c:	20 83       	st	Z, r18
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	81 50       	subi	r24, 0x01	; 1
    1042:	89 83       	std	Y+1, r24	; 0x01
		copy_u32Number /= 10;
    1044:	8e 85       	ldd	r24, Y+14	; 0x0e
    1046:	9f 85       	ldd	r25, Y+15	; 0x0f
    1048:	a8 89       	ldd	r26, Y+16	; 0x10
    104a:	b9 89       	ldd	r27, Y+17	; 0x11
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 df 11 	call	0x23be	; 0x23be <__udivmodsi4>
    105c:	da 01       	movw	r26, r20
    105e:	c9 01       	movw	r24, r18
    1060:	8e 87       	std	Y+14, r24	; 0x0e
    1062:	9f 87       	std	Y+15, r25	; 0x0f
    1064:	a8 8b       	std	Y+16, r26	; 0x10
    1066:	b9 8b       	std	Y+17, r27	; 0x11
	} while (copy_u32Number > 0 && i > 0);
    1068:	8e 85       	ldd	r24, Y+14	; 0x0e
    106a:	9f 85       	ldd	r25, Y+15	; 0x0f
    106c:	a8 89       	ldd	r26, Y+16	; 0x10
    106e:	b9 89       	ldd	r27, Y+17	; 0x11
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	a1 05       	cpc	r26, r1
    1074:	b1 05       	cpc	r27, r1
    1076:	19 f0       	breq	.+6      	; 0x107e <CLCD_voidNumber+0xae>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 23       	and	r24, r24
    107c:	39 f6       	brne	.-114    	; 0x100c <CLCD_voidNumber+0x3c>
	CLCD_voidSendString(&buf[i+1]);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	ce 01       	movw	r24, r28
    108c:	02 96       	adiw	r24, 0x02	; 2
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	0e 94 6e 07 	call	0xedc	; 0xedc <CLCD_voidSendString>
		}
	}



}
    1096:	61 96       	adiw	r28, 0x11	; 17
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <CLCD_voidWritename.1379>:
		buf[i--] = copy_u32Number % 10 + '0';
		copy_u32Number /= 10;
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <CLCD_voidWritename.1379+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <CLCD_voidWritename.1379+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	6c 83       	std	Y+4, r22	; 0x04

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    10be:	19 82       	std	Y+1, r1	; 0x01
    10c0:	13 c0       	rjmp	.+38     	; 0x10e8 <CLCD_voidWritename.1379+0x3c>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	9b 81       	ldd	r25, Y+3	; 0x03
    10cc:	fc 01       	movw	r30, r24
    10ce:	e2 0f       	add	r30, r18
    10d0:	f3 1f       	adc	r31, r19
    10d2:	80 81       	ld	r24, Z
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	69 81       	ldd	r22, Y+1	; 0x01
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	29 81       	ldd	r18, Y+1	; 0x01
    10de:	0e 94 a8 07 	call	0xf50	; 0xf50 <CLCD_voidWrite_SpacialC>
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	8f 5f       	subi	r24, 0xFF	; 255
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	98 17       	cp	r25, r24
    10ee:	48 f3       	brcs	.-46     	; 0x10c2 <CLCD_voidWritename.1379+0x16>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
		}
	}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <LCD_ClearScreen>:



}
void LCD_ClearScreen()
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLEAR_COMMAND);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <CLCD_voidCursorShift>:


void CLCD_voidCursorShift(u8 dircation)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	0f 92       	push	r0
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	88 23       	and	r24, r24
    1122:	21 f4       	brne	.+8      	; 0x112c <CLCD_voidCursorShift+0x1a>
		CLCD_voidSendCommand(0x14);
    1124:	84 e1       	ldi	r24, 0x14	; 20
    1126:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <CLCD_voidCursorShift+0x26>
	else if(dircation==Left)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	19 f4       	brne	.+6      	; 0x1138 <CLCD_voidCursorShift+0x26>
		CLCD_voidSendCommand(0x10);
    1132:	80 e1       	ldi	r24, 0x10	; 16
    1134:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <CLCD_voidDataShift>:

void CLCD_voidDataShift(u8 dircation)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 23       	and	r24, r24
    1150:	21 f4       	brne	.+8      	; 0x115a <CLCD_voidDataShift+0x1a>
		CLCD_voidSendCommand(0x1c);
    1152:	8c e1       	ldi	r24, 0x1C	; 28
    1154:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <CLCD_voidDataShift+0x26>
	else if(dircation==Left)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	19 f4       	brne	.+6      	; 0x1166 <CLCD_voidDataShift+0x26>
		CLCD_voidSendCommand(0x18);
    1160:	88 e1       	ldi	r24, 0x18	; 24
    1162:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <setbitvalue>:




u8 setbitvalue(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	28 97       	sbiw	r28, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	6b 83       	std	Y+3, r22	; 0x03
    1186:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1188:	19 82       	std	Y+1, r1	; 0x01
     if(copy_u8pin<=DIO_u8PIN7)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 30       	cpi	r24, 0x08	; 8
    118e:	08 f0       	brcs	.+2      	; 0x1192 <setbitvalue+0x24>
    1190:	f4 c0       	rjmp	.+488    	; 0x137a <setbitvalue+0x20c>
    {
        if(copy_u8value==DIO_u8PIN_LOW)
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <setbitvalue+0x2c>
    1198:	77 c0       	rjmp	.+238    	; 0x1288 <setbitvalue+0x11a>
        {
            switch(copy_u8port)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	38 87       	std	Y+8, r19	; 0x08
    11a2:	2f 83       	std	Y+7, r18	; 0x07
    11a4:	8f 81       	ldd	r24, Y+7	; 0x07
    11a6:	98 85       	ldd	r25, Y+8	; 0x08
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	59 f1       	breq	.+86     	; 0x1204 <setbitvalue+0x96>
    11ae:	2f 81       	ldd	r18, Y+7	; 0x07
    11b0:	38 85       	ldd	r19, Y+8	; 0x08
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <setbitvalue+0x54>
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	98 85       	ldd	r25, Y+8	; 0x08
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f0       	breq	.+26     	; 0x11da <setbitvalue+0x6c>
    11c0:	60 c0       	rjmp	.+192    	; 0x1282 <setbitvalue+0x114>
    11c2:	2f 81       	ldd	r18, Y+7	; 0x07
    11c4:	38 85       	ldd	r19, Y+8	; 0x08
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	89 f1       	breq	.+98     	; 0x122e <setbitvalue+0xc0>
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	98 85       	ldd	r25, Y+8	; 0x08
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <setbitvalue+0x6a>
    11d6:	40 c0       	rjmp	.+128    	; 0x1258 <setbitvalue+0xea>
    11d8:	54 c0       	rjmp	.+168    	; 0x1282 <setbitvalue+0x114>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,copy_u8pin); break;
    11da:	ab e3       	ldi	r26, 0x3B	; 59
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <setbitvalue+0x8a>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <setbitvalue+0x86>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	bd c0       	rjmp	.+378    	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTB : CLR_BIT(PORTB,copy_u8pin); break;
    1204:	a8 e3       	ldi	r26, 0x38	; 56
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <setbitvalue+0xb4>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <setbitvalue+0xb0>
    1226:	80 95       	com	r24
    1228:	84 23       	and	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	a8 c0       	rjmp	.+336    	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTC : CLR_BIT(PORTC,copy_u8pin); break;
    122e:	a5 e3       	ldi	r26, 0x35	; 53
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e5 e3       	ldi	r30, 0x35	; 53
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <setbitvalue+0xde>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <setbitvalue+0xda>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	93 c0       	rjmp	.+294    	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTD : CLR_BIT(PORTD,copy_u8pin); break;
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <setbitvalue+0x108>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <setbitvalue+0x104>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	7e c0       	rjmp	.+252    	; 0x137e <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	7b c0       	rjmp	.+246    	; 0x137e <setbitvalue+0x210>
            }
        }
        else if(copy_u8value ==DIO_u8PIN_HIGH)
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	09 f0       	breq	.+2      	; 0x1290 <setbitvalue+0x122>
    128e:	72 c0       	rjmp	.+228    	; 0x1374 <setbitvalue+0x206>
        {
            switch(copy_u8port)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3e 83       	std	Y+6, r19	; 0x06
    1298:	2d 83       	std	Y+5, r18	; 0x05
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	49 f1       	breq	.+82     	; 0x12f6 <setbitvalue+0x188>
    12a4:	2d 81       	ldd	r18, Y+5	; 0x05
    12a6:	3e 81       	ldd	r19, Y+6	; 0x06
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <setbitvalue+0x14a>
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <setbitvalue+0x160>
    12b6:	5b c0       	rjmp	.+182    	; 0x136e <setbitvalue+0x200>
    12b8:	2d 81       	ldd	r18, Y+5	; 0x05
    12ba:	3e 81       	ldd	r19, Y+6	; 0x06
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	71 f1       	breq	.+92     	; 0x131e <setbitvalue+0x1b0>
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	e9 f1       	breq	.+122    	; 0x1346 <setbitvalue+0x1d8>
    12cc:	50 c0       	rjmp	.+160    	; 0x136e <setbitvalue+0x200>
            {
                case DIO_u8PORTA : SET_BIT(PORTA,copy_u8pin); break;
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <setbitvalue+0x17e>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <setbitvalue+0x17a>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	44 c0       	rjmp	.+136    	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTB : SET_BIT(PORTB,copy_u8pin); break;
    12f6:	a8 e3       	ldi	r26, 0x38	; 56
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e8 e3       	ldi	r30, 0x38	; 56
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <setbitvalue+0x1a6>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <setbitvalue+0x1a2>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	30 c0       	rjmp	.+96     	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTC : SET_BIT(PORTC,copy_u8pin); break;
    131e:	a5 e3       	ldi	r26, 0x35	; 53
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e3       	ldi	r30, 0x35	; 53
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <setbitvalue+0x1ce>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <setbitvalue+0x1ca>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	1c c0       	rjmp	.+56     	; 0x137e <setbitvalue+0x210>
                case DIO_u8PORTD : SET_BIT(PORTD,copy_u8pin); break;
    1346:	a2 e3       	ldi	r26, 0x32	; 50
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e2 e3       	ldi	r30, 0x32	; 50
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <setbitvalue+0x1f6>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <setbitvalue+0x1f2>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	08 c0       	rjmp	.+16     	; 0x137e <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	05 c0       	rjmp	.+10     	; 0x137e <setbitvalue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	02 c0       	rjmp	.+4      	; 0x137e <setbitvalue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    }
        
    return Local_u8ErrorState;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	28 96       	adiw	r28, 0x08	; 8
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <setportvalue>:
u8 setportvalue (u8 copy_u8port,u8 copy_u8value)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <setportvalue+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <setportvalue+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState=0;
    13a4:	19 82       	std	Y+1, r1	; 0x01
      switch(copy_u8port)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	d1 f0       	breq	.+52     	; 0x13ee <setportvalue+0x5c>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <setportvalue+0x3c>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <setportvalue+0x52>
    13cc:	1f c0       	rjmp	.+62     	; 0x140c <setportvalue+0x7a>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <setportvalue+0x66>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <setportvalue+0x70>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <setportvalue+0x7a>
    {
        case DIO_u8PORTA: PORTA=copy_u8value; break; 
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	80 83       	st	Z, r24
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <setportvalue+0x7e>
        case DIO_u8PORTB: PORTB=copy_u8value; break; 
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	80 83       	st	Z, r24
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <setportvalue+0x7e>
        case DIO_u8PORTC: PORTC=copy_u8value; break; 
    13f8:	e5 e3       	ldi	r30, 0x35	; 53
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	80 83       	st	Z, r24
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <setportvalue+0x7e>
        case DIO_u8PORTD: PORTD=copy_u8value; break; 
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <setportvalue+0x7e>
        default: Local_u8ErrorState=1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
          
    }
    
     return Local_u8ErrorState;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <getbit>:

u8 getbit (u8 copy_port ,u8 copy_pin,u8* copy_value)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	27 97       	sbiw	r28, 0x07	; 7
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	8a 83       	std	Y+2, r24	; 0x02
    1438:	6b 83       	std	Y+3, r22	; 0x03
    143a:	5d 83       	std	Y+5, r21	; 0x05
    143c:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    143e:	19 82       	std	Y+1, r1	; 0x01
     if((copy_value!=NULL )  &&(copy_pin<=DIO_u8PIN7))
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	09 f4       	brne	.+2      	; 0x144a <getbit+0x28>
    1448:	78 c0       	rjmp	.+240    	; 0x153a <getbit+0x118>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	08 f0       	brcs	.+2      	; 0x1452 <getbit+0x30>
    1450:	74 c0       	rjmp	.+232    	; 0x153a <getbit+0x118>
     {
         switch(copy_port)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3f 83       	std	Y+7, r19	; 0x07
    145a:	2e 83       	std	Y+6, r18	; 0x06
    145c:	4e 81       	ldd	r20, Y+6	; 0x06
    145e:	5f 81       	ldd	r21, Y+7	; 0x07
    1460:	41 30       	cpi	r20, 0x01	; 1
    1462:	51 05       	cpc	r21, r1
    1464:	59 f1       	breq	.+86     	; 0x14bc <getbit+0x9a>
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	91 05       	cpc	r25, r1
    146e:	34 f4       	brge	.+12     	; 0x147c <getbit+0x5a>
    1470:	2e 81       	ldd	r18, Y+6	; 0x06
    1472:	3f 81       	ldd	r19, Y+7	; 0x07
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	69 f0       	breq	.+26     	; 0x1494 <getbit+0x72>
    147a:	5c c0       	rjmp	.+184    	; 0x1534 <getbit+0x112>
    147c:	4e 81       	ldd	r20, Y+6	; 0x06
    147e:	5f 81       	ldd	r21, Y+7	; 0x07
    1480:	42 30       	cpi	r20, 0x02	; 2
    1482:	51 05       	cpc	r21, r1
    1484:	79 f1       	breq	.+94     	; 0x14e4 <getbit+0xc2>
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <getbit+0x70>
    1490:	3d c0       	rjmp	.+122    	; 0x150c <getbit+0xea>
    1492:	50 c0       	rjmp	.+160    	; 0x1534 <getbit+0x112>
         {
             case DIO_u8PORTA: *copy_value=GET_BIT(PINA,copy_pin);  break;
    1494:	e9 e3       	ldi	r30, 0x39	; 57
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a9 01       	movw	r20, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <getbit+0x8a>
    14a8:	55 95       	asr	r21
    14aa:	47 95       	ror	r20
    14ac:	8a 95       	dec	r24
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <getbit+0x86>
    14b0:	ca 01       	movw	r24, r20
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	ec 81       	ldd	r30, Y+4	; 0x04
    14b6:	fd 81       	ldd	r31, Y+5	; 0x05
    14b8:	80 83       	st	Z, r24
    14ba:	41 c0       	rjmp	.+130    	; 0x153e <getbit+0x11c>
             case DIO_u8PORTB: *copy_value=GET_BIT(PINB,copy_pin);  break;
    14bc:	e6 e3       	ldi	r30, 0x36	; 54
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <getbit+0xb2>
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <getbit+0xae>
    14d8:	ca 01       	movw	r24, r20
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	ec 81       	ldd	r30, Y+4	; 0x04
    14de:	fd 81       	ldd	r31, Y+5	; 0x05
    14e0:	80 83       	st	Z, r24
    14e2:	2d c0       	rjmp	.+90     	; 0x153e <getbit+0x11c>
             case DIO_u8PORTC: *copy_value=GET_BIT(PINC,copy_pin);  break;
    14e4:	e3 e3       	ldi	r30, 0x33	; 51
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <getbit+0xda>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <getbit+0xd6>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	ec 81       	ldd	r30, Y+4	; 0x04
    1506:	fd 81       	ldd	r31, Y+5	; 0x05
    1508:	80 83       	st	Z, r24
    150a:	19 c0       	rjmp	.+50     	; 0x153e <getbit+0x11c>
             case DIO_u8PORTD: *copy_value=GET_BIT(PIND,copy_pin);  break;
    150c:	e0 e3       	ldi	r30, 0x30	; 48
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a9 01       	movw	r20, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <getbit+0x102>
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	8a 95       	dec	r24
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <getbit+0xfe>
    1528:	ca 01       	movw	r24, r20
    152a:	81 70       	andi	r24, 0x01	; 1
    152c:	ec 81       	ldd	r30, Y+4	; 0x04
    152e:	fd 81       	ldd	r31, Y+5	; 0x05
    1530:	80 83       	st	Z, r24
    1532:	05 c0       	rjmp	.+10     	; 0x153e <getbit+0x11c>
             
             default: Local_u8ErrorState=1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	02 c0       	rjmp	.+4      	; 0x153e <getbit+0x11c>
             
         }
     }
     else
     {
         Local_u8ErrorState=1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
     }
     
    
     return Local_u8ErrorState;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1540:	27 96       	adiw	r28, 0x07	; 7
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <togglebit>:
u8 togglebit(u8 copy_u8Port, u8 copy_u8Pin)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <togglebit+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <togglebit+0x8>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1564:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Pin<=DIO_u8PIN7)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	08 f0       	brcs	.+2      	; 0x156e <togglebit+0x1c>
    156c:	72 c0       	rjmp	.+228    	; 0x1652 <togglebit+0x100>
	{
		switch(copy_u8Port)
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	3d 83       	std	Y+5, r19	; 0x05
    1576:	2c 83       	std	Y+4, r18	; 0x04
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	49 f1       	breq	.+82     	; 0x15d4 <togglebit+0x82>
    1582:	2c 81       	ldd	r18, Y+4	; 0x04
    1584:	3d 81       	ldd	r19, Y+5	; 0x05
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	2c f4       	brge	.+10     	; 0x1596 <togglebit+0x44>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f0       	breq	.+24     	; 0x15ac <togglebit+0x5a>
    1594:	5b c0       	rjmp	.+182    	; 0x164c <togglebit+0xfa>
    1596:	2c 81       	ldd	r18, Y+4	; 0x04
    1598:	3d 81       	ldd	r19, Y+5	; 0x05
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	71 f1       	breq	.+92     	; 0x15fc <togglebit+0xaa>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	e9 f1       	breq	.+122    	; 0x1624 <togglebit+0xd2>
    15aa:	50 c0       	rjmp	.+160    	; 0x164c <togglebit+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,copy_u8Pin); break;
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <togglebit+0x78>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <togglebit+0x74>
    15ce:	84 27       	eor	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	41 c0       	rjmp	.+130    	; 0x1656 <togglebit+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,copy_u8Pin); break;
    15d4:	a8 e3       	ldi	r26, 0x38	; 56
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <togglebit+0xa0>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <togglebit+0x9c>
    15f6:	84 27       	eor	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	2d c0       	rjmp	.+90     	; 0x1656 <togglebit+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,copy_u8Pin); break;
    15fc:	a5 e3       	ldi	r26, 0x35	; 53
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <togglebit+0xc8>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <togglebit+0xc4>
    161e:	84 27       	eor	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	19 c0       	rjmp	.+50     	; 0x1656 <togglebit+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,copy_u8Pin); break;
    1624:	a2 e3       	ldi	r26, 0x32	; 50
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <togglebit+0xf0>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <togglebit+0xec>
    1646:	84 27       	eor	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <togglebit+0x104>
		default: Local_u8ErrorState=1; break;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <togglebit+0x104>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <EXTI_u8Int0_Pos>:
void(*EXTI_pvISR_int1)(void) = NULL;
void(*EXTI_pvISR_int2)(void) = NULL;


u8 EXTI_u8Int0_Pos(u8 copy_u8mode)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <EXTI_u8Int0_Pos+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <EXTI_u8Int0_Pos+0x8>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8error=OK;
    1676:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	3c 83       	std	Y+4, r19	; 0x04
    1680:	2b 83       	std	Y+3, r18	; 0x03
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	91 05       	cpc	r25, r1
    168a:	29 f1       	breq	.+74     	; 0x16d6 <EXTI_u8Int0_Pos+0x6e>
    168c:	2b 81       	ldd	r18, Y+3	; 0x03
    168e:	3c 81       	ldd	r19, Y+4	; 0x04
    1690:	23 30       	cpi	r18, 0x03	; 3
    1692:	31 05       	cpc	r19, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <EXTI_u8Int0_Pos+0x3a>
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	61 f0       	breq	.+24     	; 0x16b8 <EXTI_u8Int0_Pos+0x50>
    16a0:	47 c0       	rjmp	.+142    	; 0x1730 <EXTI_u8Int0_Pos+0xc8>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	23 30       	cpi	r18, 0x03	; 3
    16a8:	31 05       	cpc	r19, r1
    16aa:	99 f1       	breq	.+102    	; 0x1712 <EXTI_u8Int0_Pos+0xaa>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	84 30       	cpi	r24, 0x04	; 4
    16b2:	91 05       	cpc	r25, r1
    16b4:	f9 f0       	breq	.+62     	; 0x16f4 <EXTI_u8Int0_Pos+0x8c>
    16b6:	3c c0       	rjmp	.+120    	; 0x1730 <EXTI_u8Int0_Pos+0xc8>
	{
	case level_low:
		CLR_BIT(MCUCR,MCUCR_ISC01);
    16b8:	a5 e5       	ldi	r26, 0x55	; 85
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e5       	ldi	r30, 0x55	; 85
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8d 7f       	andi	r24, 0xFD	; 253
    16c4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    16c6:	a5 e5       	ldi	r26, 0x55	; 85
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e5       	ldi	r30, 0x55	; 85
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8e 7f       	andi	r24, 0xFE	; 254
    16d2:	8c 93       	st	X, r24
    16d4:	2f c0       	rjmp	.+94     	; 0x1734 <EXTI_u8Int0_Pos+0xcc>
		break;
	case any_logic:
		SET_BIT(MCUCR,MCUCR_ISC00);
    16d6:	a5 e5       	ldi	r26, 0x55	; 85
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e5       	ldi	r30, 0x55	; 85
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    16e4:	a5 e5       	ldi	r26, 0x55	; 85
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e5       	ldi	r30, 0x55	; 85
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	8c 93       	st	X, r24
    16f2:	20 c0       	rjmp	.+64     	; 0x1734 <EXTI_u8Int0_Pos+0xcc>
		break;
	case rising_edge:
		SET_BIT(MCUCR,MCUCR_ISC01);
    16f4:	a5 e5       	ldi	r26, 0x55	; 85
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e5       	ldi	r30, 0x55	; 85
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    1702:	a5 e5       	ldi	r26, 0x55	; 85
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e5 e5       	ldi	r30, 0x55	; 85
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	81 60       	ori	r24, 0x01	; 1
    170e:	8c 93       	st	X, r24
    1710:	11 c0       	rjmp	.+34     	; 0x1734 <EXTI_u8Int0_Pos+0xcc>
		break;
	case falling_edge:
		SET_BIT(MCUCR,MCUCR_ISC01);
    1712:	a5 e5       	ldi	r26, 0x55	; 85
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e5 e5       	ldi	r30, 0x55	; 85
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    1720:	a5 e5       	ldi	r26, 0x55	; 85
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e5 e5       	ldi	r30, 0x55	; 85
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	8c 93       	st	X, r24
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <EXTI_u8Int0_Pos+0xcc>
		break;
	default:
		Local_u8error=NOK;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	SET_BIT(GICR,GICR_INT0);
    1734:	ab e5       	ldi	r26, 0x5B	; 91
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e5       	ldi	r30, 0x5B	; 91
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 64       	ori	r24, 0x40	; 64
    1740:	8c 93       	st	X, r24
	return Local_u8error;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <EXTI_voidInt0_pre>:
void EXTI_voidInt0_pre(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
#if INT0_sense ==level_low
	CLR_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);
#elif INT0_sense == any_logic
	SET_BIT(MCUCR,MCUCR_ISC00);
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    1768:	a5 e5       	ldi	r26, 0x55	; 85
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e5       	ldi	r30, 0x55	; 85
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8d 7f       	andi	r24, 0xFD	; 253
    1774:	8c 93       	st	X, r24
#el
#error "worng int0_sence cong";
#endif

#if INT0_intive==enabled
	SET_BIT(GICR,GICR_INT0);
    1776:	ab e5       	ldi	r26, 0x5B	; 91
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb e5       	ldi	r30, 0x5B	; 91
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 64       	ori	r24, 0x40	; 64
    1782:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#el
#error "worng INT0_inti_value"
#endif

}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <EXTI_u8Int1_pos>:


u8   EXTI_u8Int1_pos(u8 copy_u8mode)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <EXTI_u8Int1_pos+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <EXTI_u8Int1_pos+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8erorr=OK;
    1798:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3c 83       	std	Y+4, r19	; 0x04
    17a2:	2b 83       	std	Y+3, r18	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	82 30       	cpi	r24, 0x02	; 2
    17aa:	91 05       	cpc	r25, r1
    17ac:	29 f1       	breq	.+74     	; 0x17f8 <EXTI_u8Int1_pos+0x6e>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	23 30       	cpi	r18, 0x03	; 3
    17b4:	31 05       	cpc	r19, r1
    17b6:	34 f4       	brge	.+12     	; 0x17c4 <EXTI_u8Int1_pos+0x3a>
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	61 f0       	breq	.+24     	; 0x17da <EXTI_u8Int1_pos+0x50>
    17c2:	47 c0       	rjmp	.+142    	; 0x1852 <EXTI_u8Int1_pos+0xc8>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	23 30       	cpi	r18, 0x03	; 3
    17ca:	31 05       	cpc	r19, r1
    17cc:	99 f1       	breq	.+102    	; 0x1834 <EXTI_u8Int1_pos+0xaa>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	91 05       	cpc	r25, r1
    17d6:	f9 f0       	breq	.+62     	; 0x1816 <EXTI_u8Int1_pos+0x8c>
    17d8:	3c c0       	rjmp	.+120    	; 0x1852 <EXTI_u8Int1_pos+0xc8>
	{
	case level_low:
		CLR_BIT(MCUCR,MCUCR_ISC11);
    17da:	a5 e5       	ldi	r26, 0x55	; 85
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e5       	ldi	r30, 0x55	; 85
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	87 7f       	andi	r24, 0xF7	; 247
    17e6:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    17e8:	a5 e5       	ldi	r26, 0x55	; 85
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e5       	ldi	r30, 0x55	; 85
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8b 7f       	andi	r24, 0xFB	; 251
    17f4:	8c 93       	st	X, r24
    17f6:	2f c0       	rjmp	.+94     	; 0x1856 <EXTI_u8Int1_pos+0xcc>
		break;
	case any_logic:
		SET_BIT(MCUCR,MCUCR_ISC10);
    17f8:	a5 e5       	ldi	r26, 0x55	; 85
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e5       	ldi	r30, 0x55	; 85
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	84 60       	ori	r24, 0x04	; 4
    1804:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
    1806:	a5 e5       	ldi	r26, 0x55	; 85
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e5       	ldi	r30, 0x55	; 85
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	87 7f       	andi	r24, 0xF7	; 247
    1812:	8c 93       	st	X, r24
    1814:	20 c0       	rjmp	.+64     	; 0x1856 <EXTI_u8Int1_pos+0xcc>
		break;
	case rising_edge:
		SET_BIT(MCUCR,MCUCR_ISC11);
    1816:	a5 e5       	ldi	r26, 0x55	; 85
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e5       	ldi	r30, 0x55	; 85
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 60       	ori	r24, 0x08	; 8
    1822:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC10);
    1824:	a5 e5       	ldi	r26, 0x55	; 85
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e5 e5       	ldi	r30, 0x55	; 85
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	84 60       	ori	r24, 0x04	; 4
    1830:	8c 93       	st	X, r24
    1832:	11 c0       	rjmp	.+34     	; 0x1856 <EXTI_u8Int1_pos+0xcc>
		break;
	case falling_edge:
		SET_BIT(MCUCR,MCUCR_ISC11);
    1834:	a5 e5       	ldi	r26, 0x55	; 85
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e5 e5       	ldi	r30, 0x55	; 85
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	88 60       	ori	r24, 0x08	; 8
    1840:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    1842:	a5 e5       	ldi	r26, 0x55	; 85
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e5 e5       	ldi	r30, 0x55	; 85
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8b 7f       	andi	r24, 0xFB	; 251
    184e:	8c 93       	st	X, r24
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <EXTI_u8Int1_pos+0xcc>
		break;
	default:
		local_u8erorr=NOK;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/*SIE for int1 */
	SET_BIT(GICR,GICR_INT1);
    1856:	ab e5       	ldi	r26, 0x5B	; 91
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e5       	ldi	r30, 0x5B	; 91
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	8c 93       	st	X, r24
	return local_u8erorr;
    1864:	89 81       	ldd	r24, Y+1	; 0x01

}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <EXTI_voidInt1_pre>:
void EXTI_voidInt1_pre(void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
#if INT1_sense ==level_low
	CLR_BIT(MCUCR,MCUCR_ISC11);
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif INT0_sense == any_logic
	SET_BIT(MCUCR,MCUCR_ISC10);
    187c:	a5 e5       	ldi	r26, 0x55	; 85
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e5 e5       	ldi	r30, 0x55	; 85
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	84 60       	ori	r24, 0x04	; 4
    1888:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
    188a:	a5 e5       	ldi	r26, 0x55	; 85
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e5 e5       	ldi	r30, 0x55	; 85
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	87 7f       	andi	r24, 0xF7	; 247
    1896:	8c 93       	st	X, r24
#el
#error "worng int1_sence cong";
#endif

#if INT1_intive==enabled
	SET_BIT(GICR,GICR_INT1);
    1898:	ab e5       	ldi	r26, 0x5B	; 91
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	eb e5       	ldi	r30, 0x5B	; 91
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	80 68       	ori	r24, 0x80	; 128
    18a4:	8c 93       	st	X, r24
#el
#error "worng INT1_inti_value"
#endif


}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <EXTI_u8Int2_pos>:


u8 EXTI_u8Int2_pos(u8 copy_u8mode)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <EXTI_u8Int2_pos+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <EXTI_u8Int2_pos+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error=OK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	31 f0       	breq	.+12     	; 0x18dc <EXTI_u8Int2_pos+0x30>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	24 30       	cpi	r18, 0x04	; 4
    18d6:	31 05       	cpc	r19, r1
    18d8:	49 f0       	breq	.+18     	; 0x18ec <EXTI_u8Int2_pos+0x40>
    18da:	10 c0       	rjmp	.+32     	; 0x18fc <EXTI_u8Int2_pos+0x50>
	{
	case falling_edge: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    18dc:	a4 e5       	ldi	r26, 0x54	; 84
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e4 e5       	ldi	r30, 0x54	; 84
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 7b       	andi	r24, 0xBF	; 191
    18e8:	8c 93       	st	X, r24
    18ea:	0a c0       	rjmp	.+20     	; 0x1900 <EXTI_u8Int2_pos+0x54>
	case rising_edge:  SET_BIT(MCUCSR,MCUCSR_INT2); break;
    18ec:	a4 e5       	ldi	r26, 0x54	; 84
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e4 e5       	ldi	r30, 0x54	; 84
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 64       	ori	r24, 0x40	; 64
    18f8:	8c 93       	st	X, r24
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <EXTI_u8Int2_pos+0x54>
	default: local_u8error=NOK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
	}

	/* active SIE for int2 */
	SET_BIT(GICR,GICR_INT2);
    1900:	ab e5       	ldi	r26, 0x5B	; 91
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	eb e5       	ldi	r30, 0x5B	; 91
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	80 62       	ori	r24, 0x20	; 32
    190c:	8c 93       	st	X, r24
	return local_u8error;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <EXTI_voidINT2_pre>:
void EXTI_voidINT2_pre(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
#if INT2_sense==falling_edge
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    1926:	a4 e5       	ldi	r26, 0x54	; 84
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e4 e5       	ldi	r30, 0x54	; 84
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	8f 7b       	andi	r24, 0xBF	; 191
    1932:	8c 93       	st	X, r24
#el
#error "worng in INTI2_sense"
#endif

#if INT2_intive==enabled
	SET_BIT(GICR,GICR_INT2);
    1934:	ab e5       	ldi	r26, 0x5B	; 91
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	eb e5       	ldi	r30, 0x5B	; 91
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 62       	ori	r24, 0x20	; 32
    1940:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2);
#el
#error "worng in INT2_intivalue "
#endif

}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <EXTI_u8sense>:

u8 EXTI_u8sense(u8 copy_u8mode,u8 copy_u8int_num)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	29 97       	sbiw	r28, 0x09	; 9
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8error=OK;
    1960:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8int_num==INT0)
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	85 30       	cpi	r24, 0x05	; 5
    1966:	09 f0       	breq	.+2      	; 0x196a <EXTI_u8sense+0x22>
    1968:	66 c0       	rjmp	.+204    	; 0x1a36 <EXTI_u8sense+0xee>
	{
		switch(copy_u8mode)
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	39 87       	std	Y+9, r19	; 0x09
    1972:	28 87       	std	Y+8, r18	; 0x08
    1974:	88 85       	ldd	r24, Y+8	; 0x08
    1976:	99 85       	ldd	r25, Y+9	; 0x09
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	29 f1       	breq	.+74     	; 0x19c8 <EXTI_u8sense+0x80>
    197e:	28 85       	ldd	r18, Y+8	; 0x08
    1980:	39 85       	ldd	r19, Y+9	; 0x09
    1982:	23 30       	cpi	r18, 0x03	; 3
    1984:	31 05       	cpc	r19, r1
    1986:	34 f4       	brge	.+12     	; 0x1994 <EXTI_u8sense+0x4c>
    1988:	88 85       	ldd	r24, Y+8	; 0x08
    198a:	99 85       	ldd	r25, Y+9	; 0x09
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	61 f0       	breq	.+24     	; 0x19aa <EXTI_u8sense+0x62>
    1992:	47 c0       	rjmp	.+142    	; 0x1a22 <EXTI_u8sense+0xda>
    1994:	28 85       	ldd	r18, Y+8	; 0x08
    1996:	39 85       	ldd	r19, Y+9	; 0x09
    1998:	23 30       	cpi	r18, 0x03	; 3
    199a:	31 05       	cpc	r19, r1
    199c:	99 f1       	breq	.+102    	; 0x1a04 <EXTI_u8sense+0xbc>
    199e:	88 85       	ldd	r24, Y+8	; 0x08
    19a0:	99 85       	ldd	r25, Y+9	; 0x09
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	91 05       	cpc	r25, r1
    19a6:	f9 f0       	breq	.+62     	; 0x19e6 <EXTI_u8sense+0x9e>
    19a8:	3c c0       	rjmp	.+120    	; 0x1a22 <EXTI_u8sense+0xda>
		{
		case level_low:    CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    19aa:	a5 e5       	ldi	r26, 0x55	; 85
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e5 e5       	ldi	r30, 0x55	; 85
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	8d 7f       	andi	r24, 0xFD	; 253
    19b6:	8c 93       	st	X, r24
    19b8:	a5 e5       	ldi	r26, 0x55	; 85
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e5       	ldi	r30, 0x55	; 85
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	8c 93       	st	X, r24
    19c6:	2f c0       	rjmp	.+94     	; 0x1a26 <EXTI_u8sense+0xde>
		case any_logic:    SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    19c8:	a5 e5       	ldi	r26, 0x55	; 85
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e5       	ldi	r30, 0x55	; 85
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	81 60       	ori	r24, 0x01	; 1
    19d4:	8c 93       	st	X, r24
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8d 7f       	andi	r24, 0xFD	; 253
    19e2:	8c 93       	st	X, r24
    19e4:	20 c0       	rjmp	.+64     	; 0x1a26 <EXTI_u8sense+0xde>
		case rising_edge:  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    19e6:	a5 e5       	ldi	r26, 0x55	; 85
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e5       	ldi	r30, 0x55	; 85
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	8c 93       	st	X, r24
    19f4:	a5 e5       	ldi	r26, 0x55	; 85
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e5 e5       	ldi	r30, 0x55	; 85
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	81 60       	ori	r24, 0x01	; 1
    1a00:	8c 93       	st	X, r24
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <EXTI_u8sense+0xde>
		case falling_edge: SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    1a04:	a5 e5       	ldi	r26, 0x55	; 85
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e5 e5       	ldi	r30, 0x55	; 85
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	82 60       	ori	r24, 0x02	; 2
    1a10:	8c 93       	st	X, r24
    1a12:	a5 e5       	ldi	r26, 0x55	; 85
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e5       	ldi	r30, 0x55	; 85
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8e 7f       	andi	r24, 0xFE	; 254
    1a1e:	8c 93       	st	X, r24
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <EXTI_u8sense+0xde>
		default:           local_u8error=NOK;   break;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
		}
		/*SIE for int0 */
		SET_BIT(GICR,GICR_INT0);
    1a26:	ab e5       	ldi	r26, 0x5B	; 91
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e5       	ldi	r30, 0x5B	; 91
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 64       	ori	r24, 0x40	; 64
    1a32:	8c 93       	st	X, r24
    1a34:	99 c0       	rjmp	.+306    	; 0x1b68 <EXTI_u8sense+0x220>
	}
	else if(copy_u8int_num==INT1)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	86 30       	cpi	r24, 0x06	; 6
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <EXTI_u8sense+0xf6>
    1a3c:	66 c0       	rjmp	.+204    	; 0x1b0a <EXTI_u8sense+0x1c2>
	{
		switch(copy_u8mode)
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3f 83       	std	Y+7, r19	; 0x07
    1a46:	2e 83       	std	Y+6, r18	; 0x06
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	29 f1       	breq	.+74     	; 0x1a9c <EXTI_u8sense+0x154>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	23 30       	cpi	r18, 0x03	; 3
    1a58:	31 05       	cpc	r19, r1
    1a5a:	34 f4       	brge	.+12     	; 0x1a68 <EXTI_u8sense+0x120>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	61 f0       	breq	.+24     	; 0x1a7e <EXTI_u8sense+0x136>
    1a66:	47 c0       	rjmp	.+142    	; 0x1af6 <EXTI_u8sense+0x1ae>
    1a68:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6c:	23 30       	cpi	r18, 0x03	; 3
    1a6e:	31 05       	cpc	r19, r1
    1a70:	99 f1       	breq	.+102    	; 0x1ad8 <EXTI_u8sense+0x190>
    1a72:	8e 81       	ldd	r24, Y+6	; 0x06
    1a74:	9f 81       	ldd	r25, Y+7	; 0x07
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	91 05       	cpc	r25, r1
    1a7a:	f9 f0       	breq	.+62     	; 0x1aba <EXTI_u8sense+0x172>
    1a7c:	3c c0       	rjmp	.+120    	; 0x1af6 <EXTI_u8sense+0x1ae>
		{
		case level_low:    CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1a7e:	a5 e5       	ldi	r26, 0x55	; 85
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e5       	ldi	r30, 0x55	; 85
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	87 7f       	andi	r24, 0xF7	; 247
    1a8a:	8c 93       	st	X, r24
    1a8c:	a5 e5       	ldi	r26, 0x55	; 85
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e5       	ldi	r30, 0x55	; 85
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8b 7f       	andi	r24, 0xFB	; 251
    1a98:	8c 93       	st	X, r24
    1a9a:	2f c0       	rjmp	.+94     	; 0x1afa <EXTI_u8sense+0x1b2>
		case any_logic:    SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1a9c:	a5 e5       	ldi	r26, 0x55	; 85
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e5       	ldi	r30, 0x55	; 85
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	84 60       	ori	r24, 0x04	; 4
    1aa8:	8c 93       	st	X, r24
    1aaa:	a5 e5       	ldi	r26, 0x55	; 85
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e5 e5       	ldi	r30, 0x55	; 85
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	87 7f       	andi	r24, 0xF7	; 247
    1ab6:	8c 93       	st	X, r24
    1ab8:	20 c0       	rjmp	.+64     	; 0x1afa <EXTI_u8sense+0x1b2>
		case rising_edge:  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1aba:	a5 e5       	ldi	r26, 0x55	; 85
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e5       	ldi	r30, 0x55	; 85
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	88 60       	ori	r24, 0x08	; 8
    1ac6:	8c 93       	st	X, r24
    1ac8:	a5 e5       	ldi	r26, 0x55	; 85
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e5 e5       	ldi	r30, 0x55	; 85
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	84 60       	ori	r24, 0x04	; 4
    1ad4:	8c 93       	st	X, r24
    1ad6:	11 c0       	rjmp	.+34     	; 0x1afa <EXTI_u8sense+0x1b2>
		case falling_edge: SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1ad8:	a5 e5       	ldi	r26, 0x55	; 85
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e5       	ldi	r30, 0x55	; 85
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24
    1ae6:	a5 e5       	ldi	r26, 0x55	; 85
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e5       	ldi	r30, 0x55	; 85
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8b 7f       	andi	r24, 0xFB	; 251
    1af2:	8c 93       	st	X, r24
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <EXTI_u8sense+0x1b2>
		default:           local_u8error=NOK;		break;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	89 83       	std	Y+1, r24	; 0x01
		}

		/*SIE for int1 */
		SET_BIT(GICR,GICR_INT1);
    1afa:	ab e5       	ldi	r26, 0x5B	; 91
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	eb e5       	ldi	r30, 0x5B	; 91
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	8c 93       	st	X, r24
    1b08:	2f c0       	rjmp	.+94     	; 0x1b68 <EXTI_u8sense+0x220>
	}
	else if(copy_u8int_num==INT2)
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	87 30       	cpi	r24, 0x07	; 7
    1b0e:	51 f5       	brne	.+84     	; 0x1b64 <EXTI_u8sense+0x21c>
	{
		switch(copy_u8mode)
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3d 83       	std	Y+5, r19	; 0x05
    1b18:	2c 83       	std	Y+4, r18	; 0x04
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	91 05       	cpc	r25, r1
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <EXTI_u8sense+0x1e8>
    1b24:	2c 81       	ldd	r18, Y+4	; 0x04
    1b26:	3d 81       	ldd	r19, Y+5	; 0x05
    1b28:	24 30       	cpi	r18, 0x04	; 4
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	49 f0       	breq	.+18     	; 0x1b40 <EXTI_u8sense+0x1f8>
    1b2e:	10 c0       	rjmp	.+32     	; 0x1b50 <EXTI_u8sense+0x208>
		{
		case falling_edge: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    1b30:	a4 e5       	ldi	r26, 0x54	; 84
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e4 e5       	ldi	r30, 0x54	; 84
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8f 7b       	andi	r24, 0xBF	; 191
    1b3c:	8c 93       	st	X, r24
    1b3e:	0a c0       	rjmp	.+20     	; 0x1b54 <EXTI_u8sense+0x20c>
		case rising_edge:  SET_BIT(MCUCSR,MCUCSR_INT2); break;
    1b40:	a4 e5       	ldi	r26, 0x54	; 84
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e4 e5       	ldi	r30, 0x54	; 84
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 64       	ori	r24, 0x40	; 64
    1b4c:	8c 93       	st	X, r24
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <EXTI_u8sense+0x20c>
		default: local_u8error=NOK;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	89 83       	std	Y+1, r24	; 0x01
		}

		/* active SIE for int2 */
		SET_BIT(GICR,GICR_INT2);
    1b54:	ab e5       	ldi	r26, 0x5B	; 91
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	eb e5       	ldi	r30, 0x5B	; 91
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 62       	ori	r24, 0x20	; 32
    1b60:	8c 93       	st	X, r24
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <EXTI_u8sense+0x220>

	}
	else
	{
		local_u8error=NOK;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8error;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6a:	29 96       	adiw	r28, 0x09	; 9
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <EXTI_voidclearflag>:

u8 EXTI_voidclearflag(u8 copy_u8num)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <EXTI_voidclearflag+0x6>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error=OK;
    1b88:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8num==INT0){
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	85 30       	cpi	r24, 0x05	; 5
    1b8e:	41 f4       	brne	.+16     	; 0x1ba0 <EXTI_voidclearflag+0x24>
		CLR_BIT(GIFR,GICR_INT0);
    1b90:	aa e5       	ldi	r26, 0x5A	; 90
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ea e5       	ldi	r30, 0x5A	; 90
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 7b       	andi	r24, 0xBF	; 191
    1b9c:	8c 93       	st	X, r24
    1b9e:	18 c0       	rjmp	.+48     	; 0x1bd0 <EXTI_voidclearflag+0x54>
	}
	else if(copy_u8num==INT1){
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	86 30       	cpi	r24, 0x06	; 6
    1ba4:	41 f4       	brne	.+16     	; 0x1bb6 <EXTI_voidclearflag+0x3a>
		CLR_BIT(GIFR,GICR_INT1);
    1ba6:	aa e5       	ldi	r26, 0x5A	; 90
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ea e5       	ldi	r30, 0x5A	; 90
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 77       	andi	r24, 0x7F	; 127
    1bb2:	8c 93       	st	X, r24
    1bb4:	0d c0       	rjmp	.+26     	; 0x1bd0 <EXTI_voidclearflag+0x54>
	}
	else if(copy_u8num==INT2){
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	87 30       	cpi	r24, 0x07	; 7
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <EXTI_voidclearflag+0x50>
		CLR_BIT(GIFR,GICR_INT2);
    1bbc:	aa e5       	ldi	r26, 0x5A	; 90
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ea e5       	ldi	r30, 0x5A	; 90
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7d       	andi	r24, 0xDF	; 223
    1bc8:	8c 93       	st	X, r24
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <EXTI_voidclearflag+0x54>
	}
	else{
		local_u8error=NOK;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8error;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <EXTI_voidReadFlag>:
u8 EXTI_voidReadFlag(u8 copy_u8num)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <EXTI_voidReadFlag+0x6>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8a 83       	std	Y+2, r24	; 0x02
	u8 flag;
	if(copy_u8num==0){
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 23       	and	r24, r24
    1bec:	51 f4       	brne	.+20     	; 0x1c02 <EXTI_voidReadFlag+0x26>
		flag=GET_BIT(GIFR,GICR_INT0);
    1bee:	ea e5       	ldi	r30, 0x5A	; 90
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 95       	swap	r24
    1bf6:	86 95       	lsr	r24
    1bf8:	86 95       	lsr	r24
    1bfa:	83 70       	andi	r24, 0x03	; 3
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	13 c0       	rjmp	.+38     	; 0x1c28 <EXTI_voidReadFlag+0x4c>
	}
	else if(copy_u8num==1){
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	41 f4       	brne	.+16     	; 0x1c18 <EXTI_voidReadFlag+0x3c>
		flag=GET_BIT(GIFR,GICR_INT1);
    1c08:	ea e5       	ldi	r30, 0x5A	; 90
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 1f       	adc	r24, r24
    1c10:	88 27       	eor	r24, r24
    1c12:	88 1f       	adc	r24, r24
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <EXTI_voidReadFlag+0x4c>
	}
	else{
		flag=GET_BIT(GIFR,GICR_INT2);
    1c18:	ea e5       	ldi	r30, 0x5A	; 90
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 95       	swap	r24
    1c20:	86 95       	lsr	r24
    1c22:	87 70       	andi	r24, 0x07	; 7
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <EXTI_u8Set_Callback_int0>:


u8 EXTI_u8Set_Callback_int0(void (*copy_pvInt0)(void))
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <EXTI_u8Set_Callback_int0+0x6>
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9b 83       	std	Y+3, r25	; 0x03
    1c42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8error=OK;
    1c44:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvInt0 != NULL)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	39 f0       	breq	.+14     	; 0x1c5c <EXTI_u8Set_Callback_int0+0x28>
	{
		EXTI_pvISR_int0=copy_pvInt0;
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	90 93 87 00 	sts	0x0087, r25
    1c56:	80 93 86 00 	sts	0x0086, r24
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <EXTI_u8Set_Callback_int0+0x2c>
	}
	else
	{
		Local_u8error=NULL_POINTER;
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8error;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <EXTI_u8Set_Callback_int1>:
u8 EXTI_u8Set_Callback_int1(void (*copy_pvInt1)(void))
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <EXTI_u8Set_Callback_int1+0x6>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9b 83       	std	Y+3, r25	; 0x03
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8error=OK;
    1c7e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvInt1 != NULL)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	39 f0       	breq	.+14     	; 0x1c96 <EXTI_u8Set_Callback_int1+0x28>
	{
		EXTI_pvISR_int1=copy_pvInt1;
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	90 93 89 00 	sts	0x0089, r25
    1c90:	80 93 88 00 	sts	0x0088, r24
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <EXTI_u8Set_Callback_int1+0x2c>
	}
	else
	{
		Local_u8error=NULL_POINTER;
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8error;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <EXTI_u8Set_Callback_int2>:
u8 EXTI_u8Set_Callback_int2(void (*copy_pvInt2)(void))
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <EXTI_u8Set_Callback_int2+0x6>
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9b 83       	std	Y+3, r25	; 0x03
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8error=OK;
    1cb8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvInt2 != NULL)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <EXTI_u8Set_Callback_int2+0x28>
	{
		EXTI_pvISR_int2=copy_pvInt2;
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	90 93 8b 00 	sts	0x008B, r25
    1cca:	80 93 8a 00 	sts	0x008A, r24
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <EXTI_u8Set_Callback_int2+0x2c>
	}
	else
	{
		Local_u8error=NULL_POINTER;
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8error;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <__vector_1>:


void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvISR_int0!=NULL)
    1d0c:	80 91 86 00 	lds	r24, 0x0086
    1d10:	90 91 87 00 	lds	r25, 0x0087
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <__vector_1+0x40>
	{
		EXTI_pvISR_int0();
    1d18:	e0 91 86 00 	lds	r30, 0x0086
    1d1c:	f0 91 87 00 	lds	r31, 0x0087
    1d20:	09 95       	icall
	}
	else{
		/* DO nothing */
	}

}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1d48:	1f 92       	push	r1
    1d4a:	0f 92       	push	r0
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	0f 92       	push	r0
    1d50:	11 24       	eor	r1, r1
    1d52:	2f 93       	push	r18
    1d54:	3f 93       	push	r19
    1d56:	4f 93       	push	r20
    1d58:	5f 93       	push	r21
    1d5a:	6f 93       	push	r22
    1d5c:	7f 93       	push	r23
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
    1d62:	af 93       	push	r26
    1d64:	bf 93       	push	r27
    1d66:	ef 93       	push	r30
    1d68:	ff 93       	push	r31
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvISR_int1!=NULL)
    1d72:	80 91 88 00 	lds	r24, 0x0088
    1d76:	90 91 89 00 	lds	r25, 0x0089
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	29 f0       	breq	.+10     	; 0x1d88 <__vector_2+0x40>
	{
		EXTI_pvISR_int1();
    1d7e:	e0 91 88 00 	lds	r30, 0x0088
    1d82:	f0 91 89 00 	lds	r31, 0x0089
    1d86:	09 95       	icall
	}
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	0f 90       	pop	r0
    1daa:	1f 90       	pop	r1
    1dac:	18 95       	reti

00001dae <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvISR_int2!=NULL)
    1dd8:	80 91 8a 00 	lds	r24, 0x008A
    1ddc:	90 91 8b 00 	lds	r25, 0x008B
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	29 f0       	breq	.+10     	; 0x1dee <__vector_3+0x40>
	{
		EXTI_pvISR_int2();
    1de4:	e0 91 8a 00 	lds	r30, 0x008A
    1de8:	f0 91 8b 00 	lds	r31, 0x008B
    1dec:	09 95       	icall
	}
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <GIE_voidEnable>:

#include  "GIE_interface.h"
#include  "GIE_register.h"

void GIE_voidEnable(void)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1e1c:	af e5       	ldi	r26, 0x5F	; 95
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	ef e5       	ldi	r30, 0x5F	; 95
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 68       	ori	r24, 0x80	; 128
    1e28:	8c 93       	st	X, r24
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1e38:	af e5       	ldi	r26, 0x5F	; 95
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e5       	ldi	r30, 0x5F	; 95
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 77       	andi	r24, 0x7F	; 127
    1e44:	8c 93       	st	X, r24
}
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <PORT_voidInti>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInti(void)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_drive;
    1e54:	ea e3       	ldi	r30, 0x3A	; 58
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	80 83       	st	Z, r24
	DDRB=PORTB_drive;
    1e5c:	e7 e3       	ldi	r30, 0x37	; 55
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	87 e0       	ldi	r24, 0x07	; 7
    1e62:	80 83       	st	Z, r24
	DDRC=PORTC_drive;
    1e64:	e4 e3       	ldi	r30, 0x34	; 52
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	10 82       	st	Z, r1
	DDRD=PORTD_drive;
    1e6a:	e1 e3       	ldi	r30, 0x31	; 49
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	10 82       	st	Z, r1
	
	PORTA=PORTA_INTI_VALUE;
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
	PORTB=PORTB_INTI_VALUE;
    1e76:	e8 e3       	ldi	r30, 0x38	; 56
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	10 82       	st	Z, r1
	PORTC=PORTC_INTI_VALUE;
    1e7c:	e5 e3       	ldi	r30, 0x35	; 53
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	80 83       	st	Z, r24
	PORTD=PORTD_INTI_VALUE;
    1e84:	e2 e3       	ldi	r30, 0x32	; 50
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8c e0       	ldi	r24, 0x0C	; 12
    1e8a:	80 83       	st	Z, r24

}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <main>:
void left_paddle(void);
void right_panddle(void);


void  main(void)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62

	PORT_voidInti();
    1e9a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <PORT_voidInti>
	CLCD_voidInit(0);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	EXTI_voidInt0_pre();
    1ea4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <EXTI_voidInt0_pre>
	EXTI_voidInt1_pre();
    1ea8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <EXTI_voidInt1_pre>
	EXTI_u8Set_Callback_int0(left_paddle);
    1eac:	85 e6       	ldi	r24, 0x65	; 101
    1eae:	9f e0       	ldi	r25, 0x0F	; 15
    1eb0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <EXTI_u8Set_Callback_int0>
	EXTI_u8Set_Callback_int1(right_panddle);
    1eb4:	89 e7       	ldi	r24, 0x79	; 121
    1eb6:	9f e0       	ldi	r25, 0x0F	; 15
    1eb8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <EXTI_u8Set_Callback_int1>

	GIE_voidEnable();
    1ebc:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <GIE_voidEnable>

	while(1){



		ball_position();
    1ec0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ball_position>
		displaygame();
    1ec4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <displaygame>
    1ec8:	fb cf       	rjmp	.-10     	; 0x1ec0 <main+0x2e>

00001eca <left_paddle>:


	}
}
void left_paddle(void)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62

	if(leftPaddlePosition==0)
    1ed2:	80 91 8c 00 	lds	r24, 0x008C
    1ed6:	88 23       	and	r24, r24
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <left_paddle+0x18>
	{
		leftPaddlePosition=1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	80 93 8c 00 	sts	0x008C, r24
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <left_paddle+0x1c>
	}
	else
	{
		leftPaddlePosition=0;
    1ee2:	10 92 8c 00 	sts	0x008C, r1

	}
	EXTI_voidclearflag(INT0);
    1ee6:	85 e0       	ldi	r24, 0x05	; 5
    1ee8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <EXTI_voidclearflag>
}
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <right_panddle>:
void right_panddle(void)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	if(rightPaddlePosition==0)
    1efa:	80 91 8d 00 	lds	r24, 0x008D
    1efe:	88 23       	and	r24, r24
    1f00:	21 f4       	brne	.+8      	; 0x1f0a <right_panddle+0x18>
	{
		rightPaddlePosition=1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 8d 00 	sts	0x008D, r24
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <right_panddle+0x1c>
	}
	else
	{
		rightPaddlePosition=0;
    1f0a:	10 92 8d 00 	sts	0x008D, r1
	}
	EXTI_voidclearflag(INT1);
    1f0e:	86 e0       	ldi	r24, 0x06	; 6
    1f10:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <EXTI_voidclearflag>
}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <movePaddles>:
void movePaddles() {
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	// Move the left paddle

	getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
    1f22:	23 e9       	ldi	r18, 0x93	; 147
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	0e 94 11 0a 	call	0x1422	; 0x1422 <getbit>
	if(left_value==0)
    1f30:	80 91 93 00 	lds	r24, 0x0093
    1f34:	88 23       	and	r24, r24
    1f36:	51 f4       	brne	.+20     	; 0x1f4c <movePaddles+0x32>
	{
		if(leftPaddlePosition==0)
    1f38:	80 91 8c 00 	lds	r24, 0x008C
    1f3c:	88 23       	and	r24, r24
    1f3e:	21 f4       	brne	.+8      	; 0x1f48 <movePaddles+0x2e>
		{
			leftPaddlePosition=1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	80 93 8c 00 	sts	0x008C, r24
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <movePaddles+0x32>
		}
		else
		{
			leftPaddlePosition=0;
    1f48:	10 92 8c 00 	sts	0x008C, r1

		}

	}
	/* move right paddle*/
	getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
    1f4c:	20 e9       	ldi	r18, 0x90	; 144
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	a9 01       	movw	r20, r18
    1f56:	0e 94 11 0a 	call	0x1422	; 0x1422 <getbit>
	if(right_value==0)
    1f5a:	80 91 90 00 	lds	r24, 0x0090
    1f5e:	88 23       	and	r24, r24
    1f60:	51 f4       	brne	.+20     	; 0x1f76 <movePaddles+0x5c>
	{
		if(rightPaddlePosition==0)
    1f62:	80 91 8d 00 	lds	r24, 0x008D
    1f66:	88 23       	and	r24, r24
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <movePaddles+0x58>
		{
			rightPaddlePosition=1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	80 93 8d 00 	sts	0x008D, r24
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <movePaddles+0x5c>
		}
		else
		{
			rightPaddlePosition=0;
    1f72:	10 92 8d 00 	sts	0x008D, r1
		}

	}


}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <ball_position>:
void ball_position()
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	if(dir==0)
    1f84:	80 91 92 00 	lds	r24, 0x0092
    1f88:	88 23       	and	r24, r24
    1f8a:	31 f4       	brne	.+12     	; 0x1f98 <ball_position+0x1c>
	{
		ball++;
    1f8c:	80 91 85 00 	lds	r24, 0x0085
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	80 93 85 00 	sts	0x0085, r24
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <ball_position+0x26>
	}
	else ball--;
    1f98:	80 91 85 00 	lds	r24, 0x0085
    1f9c:	81 50       	subi	r24, 0x01	; 1
    1f9e:	80 93 85 00 	sts	0x0085, r24

	if(ball==1||ball==14)
    1fa2:	80 91 85 00 	lds	r24, 0x0085
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	21 f0       	breq	.+8      	; 0x1fb2 <ball_position+0x36>
    1faa:	80 91 85 00 	lds	r24, 0x0085
    1fae:	8e 30       	cpi	r24, 0x0E	; 14
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <ball_position+0x40>
		dir= ~dir;
    1fb2:	80 91 92 00 	lds	r24, 0x0092
    1fb6:	80 95       	com	r24
    1fb8:	80 93 92 00 	sts	0x0092, r24

}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <displaygame>:
void displaygame()
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	aa 97       	sbiw	r28, 0x2a	; 42
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearScreen();
    1fd6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_ClearScreen>

	/* set postion of left paddle*/
	CLCD_voidGOTOXY(leftPaddlePosition	, 0);
    1fda:	80 91 8c 00 	lds	r24, 0x008C
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>
	CLCD_voidSendData('|');
    1fe4:	8c e7       	ldi	r24, 0x7C	; 124
    1fe6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <displaygame+0x38>
	while(!left_value)
	{
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
    1fec:	23 e9       	ldi	r18, 0x93	; 147
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	0e 94 11 0a 	call	0x1422	; 0x1422 <getbit>
	LCD_ClearScreen();

	/* set postion of left paddle*/
	CLCD_voidGOTOXY(leftPaddlePosition	, 0);
	CLCD_voidSendData('|');
	while(!left_value)
    1ffa:	80 91 93 00 	lds	r24, 0x0093
    1ffe:	88 23       	and	r24, r24
    2000:	a9 f3       	breq	.-22     	; 0x1fec <displaygame+0x2a>
	{
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
	}
	/* set postion of right paddle*/
	CLCD_voidGOTOXY(rightPaddlePosition	, 15);
    2002:	80 91 8d 00 	lds	r24, 0x008D
    2006:	6f e0       	ldi	r22, 0x0F	; 15
    2008:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>
	CLCD_voidSendData('|');
    200c:	8c e7       	ldi	r24, 0x7C	; 124
    200e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <displaygame+0x60>
	while(!right_value)
	{
		getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
    2014:	20 e9       	ldi	r18, 0x90	; 144
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	a9 01       	movw	r20, r18
    201e:	0e 94 11 0a 	call	0x1422	; 0x1422 <getbit>
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
	}
	/* set postion of right paddle*/
	CLCD_voidGOTOXY(rightPaddlePosition	, 15);
	CLCD_voidSendData('|');
	while(!right_value)
    2022:	80 91 90 00 	lds	r24, 0x0090
    2026:	88 23       	and	r24, r24
    2028:	a9 f3       	breq	.-22     	; 0x2014 <displaygame+0x52>
	{
		getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
	}

	/* set postion of ball 	*/
	CLCD_voidGOTOXY(0, ball);
    202a:	90 91 85 00 	lds	r25, 0x0085
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	69 2f       	mov	r22, r25
    2032:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>
	CLCD_voidSendData('0');
    2036:	80 e3       	ldi	r24, 0x30	; 48
    2038:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a8 ec       	ldi	r26, 0xC8	; 200
    2042:	b2 e4       	ldi	r27, 0x42	; 66
    2044:	8f a3       	std	Y+39, r24	; 0x27
    2046:	98 a7       	std	Y+40, r25	; 0x28
    2048:	a9 a7       	std	Y+41, r26	; 0x29
    204a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6f a1       	ldd	r22, Y+39	; 0x27
    204e:	78 a5       	ldd	r23, Y+40	; 0x28
    2050:	89 a5       	ldd	r24, Y+41	; 0x29
    2052:	9a a5       	ldd	r25, Y+42	; 0x2a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a e7       	ldi	r20, 0x7A	; 122
    205a:	53 e4       	ldi	r21, 0x43	; 67
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8b a3       	std	Y+35, r24	; 0x23
    2066:	9c a3       	std	Y+36, r25	; 0x24
    2068:	ad a3       	std	Y+37, r26	; 0x25
    206a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    206c:	6b a1       	ldd	r22, Y+35	; 0x23
    206e:	7c a1       	ldd	r23, Y+36	; 0x24
    2070:	8d a1       	ldd	r24, Y+37	; 0x25
    2072:	9e a1       	ldd	r25, Y+38	; 0x26
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <displaygame+0xcc>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	3f c0       	rjmp	.+126    	; 0x210c <displaygame+0x14a>
	else if (__tmp > 65535)
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <displaygame+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6f a1       	ldd	r22, Y+39	; 0x27
    20a8:	78 a5       	ldd	r23, Y+40	; 0x28
    20aa:	89 a5       	ldd	r24, Y+41	; 0x29
    20ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <displaygame+0x12c>
    20d0:	89 e1       	ldi	r24, 0x19	; 25
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	98 a3       	std	Y+32, r25	; 0x20
    20d6:	8f 8f       	std	Y+31, r24	; 0x1f
    20d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20da:	98 a1       	ldd	r25, Y+32	; 0x20
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <displaygame+0x11a>
    20e0:	98 a3       	std	Y+32, r25	; 0x20
    20e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	89 a1       	ldd	r24, Y+33	; 0x21
    20e6:	9a a1       	ldd	r25, Y+34	; 0x22
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <displaygame+0x10e>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <displaygame+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6b a1       	ldd	r22, Y+35	; 0x23
    20fa:	7c a1       	ldd	r23, Y+36	; 0x24
    20fc:	8d a1       	ldd	r24, Y+37	; 0x25
    20fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	9e 8f       	std	Y+30, r25	; 0x1e
    2112:	8d 8f       	std	Y+29, r24	; 0x1d
    2114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2116:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <displaygame+0x156>
    211c:	9e 8f       	std	Y+30, r25	; 0x1e
    211e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	/* right score */
	if(ball ==1&&leftPaddlePosition==1)
    2120:	80 91 85 00 	lds	r24, 0x0085
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	09 f0       	breq	.+2      	; 0x212a <displaygame+0x168>
    2128:	9e c0       	rjmp	.+316    	; 0x2266 <displaygame+0x2a4>
    212a:	80 91 8c 00 	lds	r24, 0x008C
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	09 f0       	breq	.+2      	; 0x2134 <displaygame+0x172>
    2132:	99 c0       	rjmp	.+306    	; 0x2266 <displaygame+0x2a4>
	{
		rightPlayerScore++;
    2134:	80 91 8f 00 	lds	r24, 0x008F
    2138:	8f 5f       	subi	r24, 0xFF	; 255
    213a:	80 93 8f 00 	sts	0x008F, r24
		LCD_ClearScreen();
    213e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_ClearScreen>
		CLCD_voidSendString("right score = ");
    2142:	80 e6       	ldi	r24, 0x60	; 96
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 6e 07 	call	0xedc	; 0xedc <CLCD_voidSendString>
		CLCD_voidNumber(rightPlayerScore);
    214a:	80 91 8f 00 	lds	r24, 0x008F
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e0       	ldi	r26, 0x00	; 0
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidNumber>
		CLCD_voidGOTOXY(1, 0);
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>
		CLCD_voidSendString("left score = ");
    2166:	8f e6       	ldi	r24, 0x6F	; 111
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 6e 07 	call	0xedc	; 0xedc <CLCD_voidSendString>
		CLCD_voidNumber(leftPlayerScore);
    216e:	80 91 8e 00 	lds	r24, 0x008E
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e0       	ldi	r26, 0x00	; 0
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidNumber>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	aa ef       	ldi	r26, 0xFA	; 250
    2188:	b4 e4       	ldi	r27, 0x44	; 68
    218a:	89 8f       	std	Y+25, r24	; 0x19
    218c:	9a 8f       	std	Y+26, r25	; 0x1a
    218e:	ab 8f       	std	Y+27, r26	; 0x1b
    2190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	69 8d       	ldd	r22, Y+25	; 0x19
    2194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8d 8b       	std	Y+21, r24	; 0x15
    21ac:	9e 8b       	std	Y+22, r25	; 0x16
    21ae:	af 8b       	std	Y+23, r26	; 0x17
    21b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b2:	6d 89       	ldd	r22, Y+21	; 0x15
    21b4:	7e 89       	ldd	r23, Y+22	; 0x16
    21b6:	8f 89       	ldd	r24, Y+23	; 0x17
    21b8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <displaygame+0x212>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <displaygame+0x290>
	else if (__tmp > 65535)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <displaygame+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9c 8b       	std	Y+20, r25	; 0x14
    2212:	8b 8b       	std	Y+19, r24	; 0x13
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <displaygame+0x272>
    2216:	89 e1       	ldi	r24, 0x19	; 25
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9a 8b       	std	Y+18, r25	; 0x12
    221c:	89 8b       	std	Y+17, r24	; 0x11
    221e:	89 89       	ldd	r24, Y+17	; 0x11
    2220:	9a 89       	ldd	r25, Y+18	; 0x12
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <displaygame+0x260>
    2226:	9a 8b       	std	Y+18, r25	; 0x12
    2228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <displaygame+0x254>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <displaygame+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6d 89       	ldd	r22, Y+21	; 0x15
    2240:	7e 89       	ldd	r23, Y+22	; 0x16
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	98 8d       	ldd	r25, Y+24	; 0x18
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	8b 89       	ldd	r24, Y+19	; 0x13
    2254:	9c 89       	ldd	r25, Y+20	; 0x14
    2256:	98 8b       	std	Y+16, r25	; 0x10
    2258:	8f 87       	std	Y+15, r24	; 0x0f
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 89       	ldd	r25, Y+16	; 0x10
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <displaygame+0x29c>
    2262:	98 8b       	std	Y+16, r25	; 0x10
    2264:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);

	}
	/* left score */
	if(ball == 14 && rightPaddlePosition==1)
    2266:	80 91 85 00 	lds	r24, 0x0085
    226a:	8e 30       	cpi	r24, 0x0E	; 14
    226c:	09 f0       	breq	.+2      	; 0x2270 <displaygame+0x2ae>
    226e:	9e c0       	rjmp	.+316    	; 0x23ac <displaygame+0x3ea>
    2270:	80 91 8d 00 	lds	r24, 0x008D
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	09 f0       	breq	.+2      	; 0x227a <displaygame+0x2b8>
    2278:	99 c0       	rjmp	.+306    	; 0x23ac <displaygame+0x3ea>
	{

		leftPlayerScore++;LCD_ClearScreen();
    227a:	80 91 8e 00 	lds	r24, 0x008E
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	80 93 8e 00 	sts	0x008E, r24
    2284:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_ClearScreen>
		CLCD_voidSendString("right score = ");
    2288:	80 e6       	ldi	r24, 0x60	; 96
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 6e 07 	call	0xedc	; 0xedc <CLCD_voidSendString>
		CLCD_voidNumber(rightPlayerScore);
    2290:	80 91 8f 00 	lds	r24, 0x008F
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e0       	ldi	r26, 0x00	; 0
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidNumber>
		CLCD_voidGOTOXY(1, 0);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	0e 94 8a 07 	call	0xf14	; 0xf14 <CLCD_voidGOTOXY>
		CLCD_voidSendString("left score = ");
    22ac:	8f e6       	ldi	r24, 0x6F	; 111
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 6e 07 	call	0xedc	; 0xedc <CLCD_voidSendString>
		CLCD_voidNumber(leftPlayerScore);
    22b4:	80 91 8e 00 	lds	r24, 0x008E
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <CLCD_voidNumber>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	aa ef       	ldi	r26, 0xFA	; 250
    22ce:	b4 e4       	ldi	r27, 0x44	; 68
    22d0:	8b 87       	std	Y+11, r24	; 0x0b
    22d2:	9c 87       	std	Y+12, r25	; 0x0c
    22d4:	ad 87       	std	Y+13, r26	; 0x0d
    22d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	53 e4       	ldi	r21, 0x43	; 67
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8f 83       	std	Y+7, r24	; 0x07
    22f2:	98 87       	std	Y+8, r25	; 0x08
    22f4:	a9 87       	std	Y+9, r26	; 0x09
    22f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <displaygame+0x358>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <displaygame+0x3d6>
	else if (__tmp > 65535)
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <displaygame+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	0f c0       	rjmp	.+30     	; 0x237a <displaygame+0x3b8>
    235c:	89 e1       	ldi	r24, 0x19	; 25
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <displaygame+0x3a6>
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <displaygame+0x39a>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <displaygame+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <displaygame+0x3e2>
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
	}
}
    23ac:	aa 96       	adiw	r28, 0x2a	; 42
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <__udivmodsi4>:
    23be:	a1 e2       	ldi	r26, 0x21	; 33
    23c0:	1a 2e       	mov	r1, r26
    23c2:	aa 1b       	sub	r26, r26
    23c4:	bb 1b       	sub	r27, r27
    23c6:	fd 01       	movw	r30, r26
    23c8:	0d c0       	rjmp	.+26     	; 0x23e4 <__udivmodsi4_ep>

000023ca <__udivmodsi4_loop>:
    23ca:	aa 1f       	adc	r26, r26
    23cc:	bb 1f       	adc	r27, r27
    23ce:	ee 1f       	adc	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	a2 17       	cp	r26, r18
    23d4:	b3 07       	cpc	r27, r19
    23d6:	e4 07       	cpc	r30, r20
    23d8:	f5 07       	cpc	r31, r21
    23da:	20 f0       	brcs	.+8      	; 0x23e4 <__udivmodsi4_ep>
    23dc:	a2 1b       	sub	r26, r18
    23de:	b3 0b       	sbc	r27, r19
    23e0:	e4 0b       	sbc	r30, r20
    23e2:	f5 0b       	sbc	r31, r21

000023e4 <__udivmodsi4_ep>:
    23e4:	66 1f       	adc	r22, r22
    23e6:	77 1f       	adc	r23, r23
    23e8:	88 1f       	adc	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	1a 94       	dec	r1
    23ee:	69 f7       	brne	.-38     	; 0x23ca <__udivmodsi4_loop>
    23f0:	60 95       	com	r22
    23f2:	70 95       	com	r23
    23f4:	80 95       	com	r24
    23f6:	90 95       	com	r25
    23f8:	9b 01       	movw	r18, r22
    23fa:	ac 01       	movw	r20, r24
    23fc:	bd 01       	movw	r22, r26
    23fe:	cf 01       	movw	r24, r30
    2400:	08 95       	ret

00002402 <__prologue_saves__>:
    2402:	2f 92       	push	r2
    2404:	3f 92       	push	r3
    2406:	4f 92       	push	r4
    2408:	5f 92       	push	r5
    240a:	6f 92       	push	r6
    240c:	7f 92       	push	r7
    240e:	8f 92       	push	r8
    2410:	9f 92       	push	r9
    2412:	af 92       	push	r10
    2414:	bf 92       	push	r11
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	ca 1b       	sub	r28, r26
    242c:	db 0b       	sbc	r29, r27
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	09 94       	ijmp

0000243a <__epilogue_restores__>:
    243a:	2a 88       	ldd	r2, Y+18	; 0x12
    243c:	39 88       	ldd	r3, Y+17	; 0x11
    243e:	48 88       	ldd	r4, Y+16	; 0x10
    2440:	5f 84       	ldd	r5, Y+15	; 0x0f
    2442:	6e 84       	ldd	r6, Y+14	; 0x0e
    2444:	7d 84       	ldd	r7, Y+13	; 0x0d
    2446:	8c 84       	ldd	r8, Y+12	; 0x0c
    2448:	9b 84       	ldd	r9, Y+11	; 0x0b
    244a:	aa 84       	ldd	r10, Y+10	; 0x0a
    244c:	b9 84       	ldd	r11, Y+9	; 0x09
    244e:	c8 84       	ldd	r12, Y+8	; 0x08
    2450:	df 80       	ldd	r13, Y+7	; 0x07
    2452:	ee 80       	ldd	r14, Y+6	; 0x06
    2454:	fd 80       	ldd	r15, Y+5	; 0x05
    2456:	0c 81       	ldd	r16, Y+4	; 0x04
    2458:	1b 81       	ldd	r17, Y+3	; 0x03
    245a:	aa 81       	ldd	r26, Y+2	; 0x02
    245c:	b9 81       	ldd	r27, Y+1	; 0x01
    245e:	ce 0f       	add	r28, r30
    2460:	d1 1d       	adc	r29, r1
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	ed 01       	movw	r28, r26
    246e:	08 95       	ret

00002470 <_exit>:
    2470:	f8 94       	cli

00002472 <__stop_program>:
    2472:	ff cf       	rjmp	.-2      	; 0x2472 <__stop_program>
