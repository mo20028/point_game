
point_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000026c4  00002758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800086  00800086  0000277e  2**0
                  ALLOC
  3 .stab         00001d1c  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c10  00000000  00000000  0000449c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000539b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000073e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000084e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000095e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000098a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 10 	call	0x214a	; 0x214a <main>
      8a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 13 	jmp	0x268a	; 0x268a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 35 13 	jmp	0x266a	; 0x266a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <CLCD_voidSendCommand>:
#include  "CLCD_config.h"
#include  "CLCD_interface.h"
#include  "CLCD_pravite.h"

void CLCD_voidSendCommand(u8 copy_u8command)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2f 97       	sbiw	r28, 0x0f	; 15
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs low for command*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
	/*set data value*/
	setportvalue(CLCD_DATA_PORT, copy_u8command);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	6f 85       	ldd	r22, Y+15	; 0x0f
     ccc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <setportvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e4       	ldi	r27, 0x40	; 64
     ce2:	8b 87       	std	Y+11, r24	; 0x0b
     ce4:	9c 87       	std	Y+12, r25	; 0x0c
     ce6:	ad 87       	std	Y+13, r26	; 0x0d
     ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	6b 85       	ldd	r22, Y+11	; 0x0b
     cec:	7c 85       	ldd	r23, Y+12	; 0x0c
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4a e7       	ldi	r20, 0x7A	; 122
     cf8:	53 e4       	ldi	r21, 0x43	; 67
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8f 83       	std	Y+7, r24	; 0x07
     d04:	98 87       	std	Y+8, r25	; 0x08
     d06:	a9 87       	std	Y+9, r26	; 0x09
     d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9e 83       	std	Y+6, r25	; 0x06
     d28:	8d 83       	std	Y+5, r24	; 0x05
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     d2c:	6f 81       	ldd	r22, Y+7	; 0x07
     d2e:	78 85       	ldd	r23, Y+8	; 0x08
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	4f e7       	ldi	r20, 0x7F	; 127
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e2       	ldi	r20, 0x20	; 32
     d52:	51 e4       	ldi	r21, 0x41	; 65
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <CLCD_voidSendCommand+0xee>
     d6e:	89 e1       	ldi	r24, 0x19	; 25
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <CLCD_voidSendCommand+0xdc>
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	9e 81       	ldd	r25, Y+6	; 0x06
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	69 f7       	brne	.-38     	; 0xd6e <CLCD_voidSendCommand+0xd0>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <CLCD_voidSendCommand+0x118>
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
}
     dc8:	2f 96       	adiw	r28, 0x0f	; 15
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <CLCD_voidSendData>:
void CLCD_voidSendData(u8 copy_u8Data)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	2f 97       	sbiw	r28, 0x0f	; 15
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	8f 87       	std	Y+15, r24	; 0x0f
	/*set rs high for data*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
	/*set data value*/
	setportvalue(CLCD_DATA_PORT, copy_u8Data);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	6f 85       	ldd	r22, Y+15	; 0x0f
     e08:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <setportvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e4       	ldi	r27, 0x40	; 64
     e1e:	8b 87       	std	Y+11, r24	; 0x0b
     e20:	9c 87       	std	Y+12, r25	; 0x0c
     e22:	ad 87       	std	Y+13, r26	; 0x0d
     e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e26:	6b 85       	ldd	r22, Y+11	; 0x0b
     e28:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	4a e7       	ldi	r20, 0x7A	; 122
     e34:	53 e4       	ldi	r21, 0x43	; 67
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	8f 83       	std	Y+7, r24	; 0x07
     e40:	98 87       	std	Y+8, r25	; 0x08
     e42:	a9 87       	std	Y+9, r26	; 0x09
     e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e46:	6f 81       	ldd	r22, Y+7	; 0x07
     e48:	78 85       	ldd	r23, Y+8	; 0x08
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	5f e3       	ldi	r21, 0x3F	; 63
     e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e5a:	88 23       	and	r24, r24
     e5c:	2c f4       	brge	.+10     	; 0xe68 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	3f c0       	rjmp	.+126    	; 0xee6 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	4f e7       	ldi	r20, 0x7F	; 127
     e76:	57 e4       	ldi	r21, 0x47	; 71
     e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	4c f5       	brge	.+82     	; 0xed2 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e80:	6b 85       	ldd	r22, Y+11	; 0x0b
     e82:	7c 85       	ldd	r23, Y+12	; 0x0c
     e84:	8d 85       	ldd	r24, Y+13	; 0x0d
     e86:	9e 85       	ldd	r25, Y+14	; 0x0e
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e2       	ldi	r20, 0x20	; 32
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	0f c0       	rjmp	.+30     	; 0xec8 <CLCD_voidSendData+0xee>
     eaa:	89 e1       	ldi	r24, 0x19	; 25
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	9c 81       	ldd	r25, Y+4	; 0x04
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <CLCD_voidSendData+0xdc>
     eba:	9c 83       	std	Y+4, r25	; 0x04
     ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	69 f7       	brne	.-38     	; 0xeaa <CLCD_voidSendData+0xd0>
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed2:	6f 81       	ldd	r22, Y+7	; 0x07
     ed4:	78 85       	ldd	r23, Y+8	; 0x08
     ed6:	89 85       	ldd	r24, Y+9	; 0x09
     ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <CLCD_voidSendData+0x118>
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <setbitvalue>
}
     f04:	2f 96       	adiw	r28, 0x0f	; 15
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <CLCD_voidInit>:
void CLCD_voidInit(u8 mode)
{
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	cd 57       	subi	r28, 0x7D	; 125
     f24:	d0 40       	sbci	r29, 0x00	; 0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	fe 01       	movw	r30, r28
     f32:	e3 58       	subi	r30, 0x83	; 131
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 83       	st	Z, r24
	if(mode==mode_1){
     f38:	fe 01       	movw	r30, r28
     f3a:	e3 58       	subi	r30, 0x83	; 131
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	88 23       	and	r24, r24
     f42:	09 f0       	breq	.+2      	; 0xf46 <CLCD_voidInit+0x30>
     f44:	bd c0       	rjmp	.+378    	; 0x10c0 <CLCD_voidInit+0x1aa>
     f46:	fe 01       	movw	r30, r28
     f48:	e7 58       	subi	r30, 0x87	; 135
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a4 e2       	ldi	r26, 0x24	; 36
     f52:	b2 e4       	ldi	r27, 0x42	; 66
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	8e 01       	movw	r16, r28
     f5e:	0b 58       	subi	r16, 0x8B	; 139
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	e7 58       	subi	r30, 0x87	; 135
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e7       	ldi	r20, 0x7A	; 122
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8a:	fe 01       	movw	r30, r28
     f8c:	eb 58       	subi	r30, 0x8B	; 139
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	44 f4       	brge	.+16     	; 0xfb8 <CLCD_voidInit+0xa2>
		__ticks = 1;
     fa8:	fe 01       	movw	r30, r28
     faa:	ed 58       	subi	r30, 0x8D	; 141
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
     fb6:	64 c0       	rjmp	.+200    	; 0x1080 <CLCD_voidInit+0x16a>
	else if (__tmp > 65535)
     fb8:	fe 01       	movw	r30, r28
     fba:	eb 58       	subi	r30, 0x8B	; 139
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <CLCD_voidInit+0xc2>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <CLCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	fe 01       	movw	r30, r28
     fda:	e7 58       	subi	r30, 0x87	; 135
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	8e 01       	movw	r16, r28
     ff8:	0d 58       	subi	r16, 0x8D	; 141
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	1f c0       	rjmp	.+62     	; 0x104e <CLCD_voidInit+0x138>
    1010:	fe 01       	movw	r30, r28
    1012:	ef 58       	subi	r30, 0x8F	; 143
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	89 e1       	ldi	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    101e:	fe 01       	movw	r30, r28
    1020:	ef 58       	subi	r30, 0x8F	; 143
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <CLCD_voidInit+0x112>
    102c:	fe 01       	movw	r30, r28
    102e:	ef 58       	subi	r30, 0x8F	; 143
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	de 01       	movw	r26, r28
    1038:	ad 58       	subi	r26, 0x8D	; 141
    103a:	bf 4f       	sbci	r27, 0xFF	; 255
    103c:	fe 01       	movw	r30, r28
    103e:	ed 58       	subi	r30, 0x8D	; 141
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 93       	st	X, r25
    104c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	fe 01       	movw	r30, r28
    1050:	ed 58       	subi	r30, 0x8D	; 141
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	d1 f6       	brne	.-76     	; 0x1010 <CLCD_voidInit+0xfa>
    105c:	27 c0       	rjmp	.+78     	; 0x10ac <CLCD_voidInit+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	8e 01       	movw	r16, r28
    1060:	0d 58       	subi	r16, 0x8D	; 141
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	fe 01       	movw	r30, r28
    1066:	eb 58       	subi	r30, 0x8B	; 139
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    1080:	de 01       	movw	r26, r28
    1082:	a1 59       	subi	r26, 0x91	; 145
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	fe 01       	movw	r30, r28
    1088:	ed 58       	subi	r30, 0x8D	; 141
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	8d 93       	st	X+, r24
    1092:	9c 93       	st	X, r25
    1094:	fe 01       	movw	r30, r28
    1096:	e1 59       	subi	r30, 0x91	; 145
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <CLCD_voidInit+0x188>
    10a2:	fe 01       	movw	r30, r28
    10a4:	e1 59       	subi	r30, 0x91	; 145
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
	/*wait for more than 40 ms*/
	_delay_ms(41);

	/*function set command : 2line ,5*8 front size*/
	CLCD_voidSendCommand(0b00111000);
    10ac:	88 e3       	ldi	r24, 0x38	; 56
    10ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/*diplaly on off control,display enable,cursor enable,blink enable*/
	CLCD_voidSendCommand(0b00001100);
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(1);
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    10be:	51 c4       	rjmp	.+2210   	; 0x1962 <CLCD_voidInit+0xa4c>
	}
	else if(mode==mode_2)
    10c0:	fe 01       	movw	r30, r28
    10c2:	e3 58       	subi	r30, 0x83	; 131
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <CLCD_voidInit+0x1b8>
    10cc:	4a c4       	rjmp	.+2196   	; 0x1962 <CLCD_voidInit+0xa4c>
    10ce:	fe 01       	movw	r30, r28
    10d0:	e5 59       	subi	r30, 0x95	; 149
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a4 e2       	ldi	r26, 0x24	; 36
    10da:	b2 e4       	ldi	r27, 0x42	; 66
    10dc:	80 83       	st	Z, r24
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	a2 83       	std	Z+2, r26	; 0x02
    10e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	8e 01       	movw	r16, r28
    10e6:	09 59       	subi	r16, 0x99	; 153
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	fe 01       	movw	r30, r28
    10ec:	e5 59       	subi	r30, 0x95	; 149
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a e7       	ldi	r20, 0x7A	; 122
    10fe:	53 e4       	ldi	r21, 0x43	; 67
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	f8 01       	movw	r30, r16
    110a:	80 83       	st	Z, r24
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	a2 83       	std	Z+2, r26	; 0x02
    1110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1112:	fe 01       	movw	r30, r28
    1114:	e9 59       	subi	r30, 0x99	; 153
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    112c:	88 23       	and	r24, r24
    112e:	44 f4       	brge	.+16     	; 0x1140 <CLCD_voidInit+0x22a>
		__ticks = 1;
    1130:	fe 01       	movw	r30, r28
    1132:	eb 59       	subi	r30, 0x9B	; 155
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
    113e:	64 c0       	rjmp	.+200    	; 0x1208 <CLCD_voidInit+0x2f2>
	else if (__tmp > 65535)
    1140:	fe 01       	movw	r30, r28
    1142:	e9 59       	subi	r30, 0x99	; 153
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    115a:	18 16       	cp	r1, r24
    115c:	0c f0       	brlt	.+2      	; 0x1160 <CLCD_voidInit+0x24a>
    115e:	43 c0       	rjmp	.+134    	; 0x11e6 <CLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1160:	fe 01       	movw	r30, r28
    1162:	e5 59       	subi	r30, 0x95	; 149
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	8e 01       	movw	r16, r28
    1180:	0b 59       	subi	r16, 0x9B	; 155
    1182:	1f 4f       	sbci	r17, 0xFF	; 255
    1184:	bc 01       	movw	r22, r24
    1186:	cd 01       	movw	r24, r26
    1188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	f8 01       	movw	r30, r16
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
    1196:	1f c0       	rjmp	.+62     	; 0x11d6 <CLCD_voidInit+0x2c0>
    1198:	fe 01       	movw	r30, r28
    119a:	ed 59       	subi	r30, 0x9D	; 157
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	89 e1       	ldi	r24, 0x19	; 25
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    11a6:	fe 01       	movw	r30, r28
    11a8:	ed 59       	subi	r30, 0x9D	; 157
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <CLCD_voidInit+0x29a>
    11b4:	fe 01       	movw	r30, r28
    11b6:	ed 59       	subi	r30, 0x9D	; 157
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	91 83       	std	Z+1, r25	; 0x01
    11bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11be:	de 01       	movw	r26, r28
    11c0:	ab 59       	subi	r26, 0x9B	; 155
    11c2:	bf 4f       	sbci	r27, 0xFF	; 255
    11c4:	fe 01       	movw	r30, r28
    11c6:	eb 59       	subi	r30, 0x9B	; 155
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	9c 93       	st	X, r25
    11d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	fe 01       	movw	r30, r28
    11d8:	eb 59       	subi	r30, 0x9B	; 155
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	d1 f6       	brne	.-76     	; 0x1198 <CLCD_voidInit+0x282>
    11e4:	27 c0       	rjmp	.+78     	; 0x1234 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	8e 01       	movw	r16, r28
    11e8:	0b 59       	subi	r16, 0x9B	; 155
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	e9 59       	subi	r30, 0x99	; 153
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	f8 01       	movw	r30, r16
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	de 01       	movw	r26, r28
    120a:	af 59       	subi	r26, 0x9F	; 159
    120c:	bf 4f       	sbci	r27, 0xFF	; 255
    120e:	fe 01       	movw	r30, r28
    1210:	eb 59       	subi	r30, 0x9B	; 155
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	8d 93       	st	X+, r24
    121a:	9c 93       	st	X, r25
    121c:	fe 01       	movw	r30, r28
    121e:	ef 59       	subi	r30, 0x9F	; 159
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <CLCD_voidInit+0x310>
    122a:	fe 01       	movw	r30, r28
    122c:	ef 59       	subi	r30, 0x9F	; 159
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
	{
		/*wait for more than 40 ms*/
		_delay_ms(41);

		CLCD_voidSendCommand(0b00110000);
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    123a:	fe 01       	movw	r30, r28
    123c:	e3 5a       	subi	r30, 0xA3	; 163
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a8 ec       	ldi	r26, 0xC8	; 200
    1246:	b2 e4       	ldi	r27, 0x42	; 66
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1250:	8e 01       	movw	r16, r28
    1252:	07 5a       	subi	r16, 0xA7	; 167
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	e3 5a       	subi	r30, 0xA3	; 163
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	2b ea       	ldi	r18, 0xAB	; 171
    1266:	3a ea       	ldi	r19, 0xAA	; 170
    1268:	4a ea       	ldi	r20, 0xAA	; 170
    126a:	5e e3       	ldi	r21, 0x3E	; 62
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	e7 5a       	subi	r30, 0xA7	; 167
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	34 f4       	brge	.+12     	; 0x12a8 <CLCD_voidInit+0x392>
		__ticks = 1;
    129c:	fe 01       	movw	r30, r28
    129e:	e8 5a       	subi	r30, 0xA8	; 168
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
    12a6:	e0 c0       	rjmp	.+448    	; 0x1468 <CLCD_voidInit+0x552>
	else if (__tmp > 255)
    12a8:	fe 01       	movw	r30, r28
    12aa:	e7 5a       	subi	r30, 0xA7	; 167
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	53 e4       	ldi	r21, 0x43	; 67
    12be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	0c f0       	brlt	.+2      	; 0x12c8 <CLCD_voidInit+0x3b2>
    12c6:	c0 c0       	rjmp	.+384    	; 0x1448 <CLCD_voidInit+0x532>
	{
		_delay_ms(__us / 1000.0);
    12c8:	fe 01       	movw	r30, r28
    12ca:	e3 5a       	subi	r30, 0xA3	; 163
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	54 e4       	ldi	r21, 0x44	; 68
    12de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	fe 01       	movw	r30, r28
    12e8:	ec 5a       	subi	r30, 0xAC	; 172
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	a2 83       	std	Z+2, r26	; 0x02
    12f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f4:	8e 01       	movw	r16, r28
    12f6:	00 5b       	subi	r16, 0xB0	; 176
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	fe 01       	movw	r30, r28
    12fc:	ec 5a       	subi	r30, 0xAC	; 172
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a e7       	ldi	r20, 0x7A	; 122
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	f8 01       	movw	r30, r16
    131a:	80 83       	st	Z, r24
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	a2 83       	std	Z+2, r26	; 0x02
    1320:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1322:	fe 01       	movw	r30, r28
    1324:	e0 5b       	subi	r30, 0xB0	; 176
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	44 f4       	brge	.+16     	; 0x1350 <CLCD_voidInit+0x43a>
		__ticks = 1;
    1340:	fe 01       	movw	r30, r28
    1342:	e2 5b       	subi	r30, 0xB2	; 178
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	64 c0       	rjmp	.+200    	; 0x1418 <CLCD_voidInit+0x502>
	else if (__tmp > 65535)
    1350:	fe 01       	movw	r30, r28
    1352:	e0 5b       	subi	r30, 0xB0	; 176
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	0c f0       	brlt	.+2      	; 0x1370 <CLCD_voidInit+0x45a>
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <CLCD_voidInit+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	fe 01       	movw	r30, r28
    1372:	ec 5a       	subi	r30, 0xAC	; 172
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8e 01       	movw	r16, r28
    1390:	02 5b       	subi	r16, 0xB2	; 178
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	f8 01       	movw	r30, r16
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	1f c0       	rjmp	.+62     	; 0x13e6 <CLCD_voidInit+0x4d0>
    13a8:	fe 01       	movw	r30, r28
    13aa:	e4 5b       	subi	r30, 0xB4	; 180
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	89 e1       	ldi	r24, 0x19	; 25
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
    13b6:	fe 01       	movw	r30, r28
    13b8:	e4 5b       	subi	r30, 0xB4	; 180
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <CLCD_voidInit+0x4aa>
    13c4:	fe 01       	movw	r30, r28
    13c6:	e4 5b       	subi	r30, 0xB4	; 180
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ce:	de 01       	movw	r26, r28
    13d0:	a2 5b       	subi	r26, 0xB2	; 178
    13d2:	bf 4f       	sbci	r27, 0xFF	; 255
    13d4:	fe 01       	movw	r30, r28
    13d6:	e2 5b       	subi	r30, 0xB2	; 178
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	91 81       	ldd	r25, Z+1	; 0x01
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	11 96       	adiw	r26, 0x01	; 1
    13e2:	9c 93       	st	X, r25
    13e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	fe 01       	movw	r30, r28
    13e8:	e2 5b       	subi	r30, 0xB2	; 178
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	d1 f6       	brne	.-76     	; 0x13a8 <CLCD_voidInit+0x492>
    13f4:	4b c0       	rjmp	.+150    	; 0x148c <CLCD_voidInit+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f6:	8e 01       	movw	r16, r28
    13f8:	02 5b       	subi	r16, 0xB2	; 178
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e0 5b       	subi	r30, 0xB0	; 176
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	f8 01       	movw	r30, r16
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	de 01       	movw	r26, r28
    141a:	a6 5b       	subi	r26, 0xB6	; 182
    141c:	bf 4f       	sbci	r27, 0xFF	; 255
    141e:	fe 01       	movw	r30, r28
    1420:	e2 5b       	subi	r30, 0xB2	; 178
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	9c 93       	st	X, r25
    142c:	8e 93       	st	-X, r24
    142e:	fe 01       	movw	r30, r28
    1430:	e6 5b       	subi	r30, 0xB6	; 182
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <CLCD_voidInit+0x522>
    143c:	fe 01       	movw	r30, r28
    143e:	e6 5b       	subi	r30, 0xB6	; 182
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	22 c0       	rjmp	.+68     	; 0x148c <CLCD_voidInit+0x576>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1448:	8e 01       	movw	r16, r28
    144a:	08 5a       	subi	r16, 0xA8	; 168
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	fe 01       	movw	r30, r28
    1450:	e7 5a       	subi	r30, 0xA7	; 167
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	f8 01       	movw	r30, r16
    1466:	80 83       	st	Z, r24
    1468:	de 01       	movw	r26, r28
    146a:	a7 5b       	subi	r26, 0xB7	; 183
    146c:	bf 4f       	sbci	r27, 0xFF	; 255
    146e:	fe 01       	movw	r30, r28
    1470:	e8 5a       	subi	r30, 0xA8	; 168
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1478:	fe 01       	movw	r30, r28
    147a:	e7 5b       	subi	r30, 0xB7	; 183
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	80 81       	ld	r24, Z
    1480:	8a 95       	dec	r24
    1482:	f1 f7       	brne	.-4      	; 0x1480 <CLCD_voidInit+0x56a>
    1484:	fe 01       	movw	r30, r28
    1486:	e7 5b       	subi	r30, 0xB7	; 183
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	80 83       	st	Z, r24
		_delay_us(100);						// 4 bit sequence for LCD 4-bits initializing
		CLCD_voidSendCommand(0b00110000);
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1492:	fe 01       	movw	r30, r28
    1494:	eb 5b       	subi	r30, 0xBB	; 187
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a8 ec       	ldi	r26, 0xC8	; 200
    149e:	b2 e4       	ldi	r27, 0x42	; 66
    14a0:	80 83       	st	Z, r24
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	a2 83       	std	Z+2, r26	; 0x02
    14a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14a8:	8e 01       	movw	r16, r28
    14aa:	0f 5b       	subi	r16, 0xBF	; 191
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	fe 01       	movw	r30, r28
    14b0:	eb 5b       	subi	r30, 0xBB	; 187
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	2b ea       	ldi	r18, 0xAB	; 171
    14be:	3a ea       	ldi	r19, 0xAA	; 170
    14c0:	4a ea       	ldi	r20, 0xAA	; 170
    14c2:	5e e3       	ldi	r21, 0x3E	; 62
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 83       	st	Z, r24
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	a2 83       	std	Z+2, r26	; 0x02
    14d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d6:	fe 01       	movw	r30, r28
    14d8:	ef 5b       	subi	r30, 0xBF	; 191
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	34 f4       	brge	.+12     	; 0x1500 <CLCD_voidInit+0x5ea>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	fe 01       	movw	r30, r28
    14f8:	e0 5c       	subi	r30, 0xC0	; 192
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 83       	st	Z, r24
    14fe:	9d c0       	rjmp	.+314    	; 0x163a <CLCD_voidInit+0x724>
	else if (__tmp > 255)
    1500:	fe 01       	movw	r30, r28
    1502:	ef 5b       	subi	r30, 0xBF	; 191
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	53 e4       	ldi	r21, 0x43	; 67
    1516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f0       	brlt	.+2      	; 0x1520 <CLCD_voidInit+0x60a>
    151e:	7e c0       	rjmp	.+252    	; 0x161c <CLCD_voidInit+0x706>
	{
		_delay_ms(__us / 1000.0);
    1520:	fe 01       	movw	r30, r28
    1522:	eb 5b       	subi	r30, 0xBB	; 187
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a e7       	ldi	r20, 0x7A	; 122
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8c af       	std	Y+60, r24	; 0x3c
    1540:	9d af       	std	Y+61, r25	; 0x3d
    1542:	ae af       	std	Y+62, r26	; 0x3e
    1544:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	6c ad       	ldd	r22, Y+60	; 0x3c
    1548:	7d ad       	ldd	r23, Y+61	; 0x3d
    154a:	8e ad       	ldd	r24, Y+62	; 0x3e
    154c:	9f ad       	ldd	r25, Y+63	; 0x3f
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a e7       	ldi	r20, 0x7A	; 122
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	88 af       	std	Y+56, r24	; 0x38
    1560:	99 af       	std	Y+57, r25	; 0x39
    1562:	aa af       	std	Y+58, r26	; 0x3a
    1564:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1566:	68 ad       	ldd	r22, Y+56	; 0x38
    1568:	79 ad       	ldd	r23, Y+57	; 0x39
    156a:	8a ad       	ldd	r24, Y+58	; 0x3a
    156c:	9b ad       	ldd	r25, Y+59	; 0x3b
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <CLCD_voidInit+0x672>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9f ab       	std	Y+55, r25	; 0x37
    1584:	8e ab       	std	Y+54, r24	; 0x36
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <CLCD_voidInit+0x6f0>
	else if (__tmp > 65535)
    1588:	68 ad       	ldd	r22, Y+56	; 0x38
    158a:	79 ad       	ldd	r23, Y+57	; 0x39
    158c:	8a ad       	ldd	r24, Y+58	; 0x3a
    158e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <CLCD_voidInit+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    15a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    15a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    15a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9f ab       	std	Y+55, r25	; 0x37
    15c6:	8e ab       	std	Y+54, r24	; 0x36
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <CLCD_voidInit+0x6d2>
    15ca:	89 e1       	ldi	r24, 0x19	; 25
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9d ab       	std	Y+53, r25	; 0x35
    15d0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15d2:	8c a9       	ldd	r24, Y+52	; 0x34
    15d4:	9d a9       	ldd	r25, Y+53	; 0x35
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <CLCD_voidInit+0x6c0>
    15da:	9d ab       	std	Y+53, r25	; 0x35
    15dc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8e a9       	ldd	r24, Y+54	; 0x36
    15e0:	9f a9       	ldd	r25, Y+55	; 0x37
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9f ab       	std	Y+55, r25	; 0x37
    15e6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8e a9       	ldd	r24, Y+54	; 0x36
    15ea:	9f a9       	ldd	r25, Y+55	; 0x37
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <CLCD_voidInit+0x6b4>
    15f0:	2d c0       	rjmp	.+90     	; 0x164c <CLCD_voidInit+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	68 ad       	ldd	r22, Y+56	; 0x38
    15f4:	79 ad       	ldd	r23, Y+57	; 0x39
    15f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    15f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9f ab       	std	Y+55, r25	; 0x37
    1604:	8e ab       	std	Y+54, r24	; 0x36
    1606:	8e a9       	ldd	r24, Y+54	; 0x36
    1608:	9f a9       	ldd	r25, Y+55	; 0x37
    160a:	9b ab       	std	Y+51, r25	; 0x33
    160c:	8a ab       	std	Y+50, r24	; 0x32
    160e:	8a a9       	ldd	r24, Y+50	; 0x32
    1610:	9b a9       	ldd	r25, Y+51	; 0x33
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <CLCD_voidInit+0x6fc>
    1616:	9b ab       	std	Y+51, r25	; 0x33
    1618:	8a ab       	std	Y+50, r24	; 0x32
    161a:	18 c0       	rjmp	.+48     	; 0x164c <CLCD_voidInit+0x736>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    161c:	fe 01       	movw	r30, r28
    161e:	ef 5b       	subi	r30, 0xBF	; 191
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	fe 01       	movw	r30, r28
    1634:	e0 5c       	subi	r30, 0xC0	; 192
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 83       	st	Z, r24
    163a:	fe 01       	movw	r30, r28
    163c:	e0 5c       	subi	r30, 0xC0	; 192
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 81       	ld	r24, Z
    1642:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1644:	89 a9       	ldd	r24, Y+49	; 0x31
    1646:	8a 95       	dec	r24
    1648:	f1 f7       	brne	.-4      	; 0x1646 <CLCD_voidInit+0x730>
    164a:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(100);
		CLCD_voidSendCommand(0b00110000);
    164c:	80 e3       	ldi	r24, 0x30	; 48
    164e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a8 ec       	ldi	r26, 0xC8	; 200
    1658:	b2 e4       	ldi	r27, 0x42	; 66
    165a:	8d a7       	std	Y+45, r24	; 0x2d
    165c:	9e a7       	std	Y+46, r25	; 0x2e
    165e:	af a7       	std	Y+47, r26	; 0x2f
    1660:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1662:	6d a5       	ldd	r22, Y+45	; 0x2d
    1664:	7e a5       	ldd	r23, Y+46	; 0x2e
    1666:	8f a5       	ldd	r24, Y+47	; 0x2f
    1668:	98 a9       	ldd	r25, Y+48	; 0x30
    166a:	2b ea       	ldi	r18, 0xAB	; 171
    166c:	3a ea       	ldi	r19, 0xAA	; 170
    166e:	4a ea       	ldi	r20, 0xAA	; 170
    1670:	5e e3       	ldi	r21, 0x3E	; 62
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	89 a7       	std	Y+41, r24	; 0x29
    167c:	9a a7       	std	Y+42, r25	; 0x2a
    167e:	ab a7       	std	Y+43, r26	; 0x2b
    1680:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1682:	69 a5       	ldd	r22, Y+41	; 0x29
    1684:	7a a5       	ldd	r23, Y+42	; 0x2a
    1686:	8b a5       	ldd	r24, Y+43	; 0x2b
    1688:	9c a5       	ldd	r25, Y+44	; 0x2c
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	1c f4       	brge	.+6      	; 0x16a0 <CLCD_voidInit+0x78a>
		__ticks = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	88 a7       	std	Y+40, r24	; 0x28
    169e:	91 c0       	rjmp	.+290    	; 0x17c2 <CLCD_voidInit+0x8ac>
	else if (__tmp > 255)
    16a0:	69 a5       	ldd	r22, Y+41	; 0x29
    16a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    16a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	53 e4       	ldi	r21, 0x43	; 67
    16b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	0c f0       	brlt	.+2      	; 0x16ba <CLCD_voidInit+0x7a4>
    16b8:	7b c0       	rjmp	.+246    	; 0x17b0 <CLCD_voidInit+0x89a>
	{
		_delay_ms(__us / 1000.0);
    16ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    16bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    16be:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c0:	98 a9       	ldd	r25, Y+48	; 0x30
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	54 e4       	ldi	r21, 0x44	; 68
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8c a3       	std	Y+36, r24	; 0x24
    16d4:	9d a3       	std	Y+37, r25	; 0x25
    16d6:	ae a3       	std	Y+38, r26	; 0x26
    16d8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6c a1       	ldd	r22, Y+36	; 0x24
    16dc:	7d a1       	ldd	r23, Y+37	; 0x25
    16de:	8e a1       	ldd	r24, Y+38	; 0x26
    16e0:	9f a1       	ldd	r25, Y+39	; 0x27
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a e7       	ldi	r20, 0x7A	; 122
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	88 a3       	std	Y+32, r24	; 0x20
    16f4:	99 a3       	std	Y+33, r25	; 0x21
    16f6:	aa a3       	std	Y+34, r26	; 0x22
    16f8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    16fa:	68 a1       	ldd	r22, Y+32	; 0x20
    16fc:	79 a1       	ldd	r23, Y+33	; 0x21
    16fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1700:	9b a1       	ldd	r25, Y+35	; 0x23
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <CLCD_voidInit+0x806>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9f 8f       	std	Y+31, r25	; 0x1f
    1718:	8e 8f       	std	Y+30, r24	; 0x1e
    171a:	3f c0       	rjmp	.+126    	; 0x179a <CLCD_voidInit+0x884>
	else if (__tmp > 65535)
    171c:	68 a1       	ldd	r22, Y+32	; 0x20
    171e:	79 a1       	ldd	r23, Y+33	; 0x21
    1720:	8a a1       	ldd	r24, Y+34	; 0x22
    1722:	9b a1       	ldd	r25, Y+35	; 0x23
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <CLCD_voidInit+0x870>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6c a1       	ldd	r22, Y+36	; 0x24
    1736:	7d a1       	ldd	r23, Y+37	; 0x25
    1738:	8e a1       	ldd	r24, Y+38	; 0x26
    173a:	9f a1       	ldd	r25, Y+39	; 0x27
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9f 8f       	std	Y+31, r25	; 0x1f
    175a:	8e 8f       	std	Y+30, r24	; 0x1e
    175c:	0f c0       	rjmp	.+30     	; 0x177c <CLCD_voidInit+0x866>
    175e:	89 e1       	ldi	r24, 0x19	; 25
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9d 8f       	std	Y+29, r25	; 0x1d
    1764:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1766:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1768:	9d 8d       	ldd	r25, Y+29	; 0x1d
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <CLCD_voidInit+0x854>
    176e:	9d 8f       	std	Y+29, r25	; 0x1d
    1770:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1774:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9f 8f       	std	Y+31, r25	; 0x1f
    177a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    177e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <CLCD_voidInit+0x848>
    1784:	24 c0       	rjmp	.+72     	; 0x17ce <CLCD_voidInit+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	68 a1       	ldd	r22, Y+32	; 0x20
    1788:	79 a1       	ldd	r23, Y+33	; 0x21
    178a:	8a a1       	ldd	r24, Y+34	; 0x22
    178c:	9b a1       	ldd	r25, Y+35	; 0x23
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9f 8f       	std	Y+31, r25	; 0x1f
    1798:	8e 8f       	std	Y+30, r24	; 0x1e
    179a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    179c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    179e:	9b 8f       	std	Y+27, r25	; 0x1b
    17a0:	8a 8f       	std	Y+26, r24	; 0x1a
    17a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <CLCD_voidInit+0x890>
    17aa:	9b 8f       	std	Y+27, r25	; 0x1b
    17ac:	8a 8f       	std	Y+26, r24	; 0x1a
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <CLCD_voidInit+0x8b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17b0:	69 a5       	ldd	r22, Y+41	; 0x29
    17b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    17b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	88 a7       	std	Y+40, r24	; 0x28
    17c2:	88 a5       	ldd	r24, Y+40	; 0x28
    17c4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17c6:	89 8d       	ldd	r24, Y+25	; 0x19
    17c8:	8a 95       	dec	r24
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <CLCD_voidInit+0x8b2>
    17cc:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(100);							// 4 bit sequence for LCD 4-bits initializing
		CLCD_voidSendCommand(0b00100000);
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a8 ec       	ldi	r26, 0xC8	; 200
    17da:	b2 e4       	ldi	r27, 0x42	; 66
    17dc:	8d 8b       	std	Y+21, r24	; 0x15
    17de:	9e 8b       	std	Y+22, r25	; 0x16
    17e0:	af 8b       	std	Y+23, r26	; 0x17
    17e2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17e4:	6d 89       	ldd	r22, Y+21	; 0x15
    17e6:	7e 89       	ldd	r23, Y+22	; 0x16
    17e8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ea:	98 8d       	ldd	r25, Y+24	; 0x18
    17ec:	2b ea       	ldi	r18, 0xAB	; 171
    17ee:	3a ea       	ldi	r19, 0xAA	; 170
    17f0:	4a ea       	ldi	r20, 0xAA	; 170
    17f2:	5e e3       	ldi	r21, 0x3E	; 62
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 8b       	std	Y+17, r24	; 0x11
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
    1800:	ab 8b       	std	Y+19, r26	; 0x13
    1802:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1804:	69 89       	ldd	r22, Y+17	; 0x11
    1806:	7a 89       	ldd	r23, Y+18	; 0x12
    1808:	8b 89       	ldd	r24, Y+19	; 0x13
    180a:	9c 89       	ldd	r25, Y+20	; 0x14
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	1c f4       	brge	.+6      	; 0x1822 <CLCD_voidInit+0x90c>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	88 8b       	std	Y+16, r24	; 0x10
    1820:	91 c0       	rjmp	.+290    	; 0x1944 <CLCD_voidInit+0xa2e>
	else if (__tmp > 255)
    1822:	69 89       	ldd	r22, Y+17	; 0x11
    1824:	7a 89       	ldd	r23, Y+18	; 0x12
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	53 e4       	ldi	r21, 0x43	; 67
    1832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	0c f0       	brlt	.+2      	; 0x183c <CLCD_voidInit+0x926>
    183a:	7b c0       	rjmp	.+246    	; 0x1932 <CLCD_voidInit+0xa1c>
	{
		_delay_ms(__us / 1000.0);
    183c:	6d 89       	ldd	r22, Y+21	; 0x15
    183e:	7e 89       	ldd	r23, Y+22	; 0x16
    1840:	8f 89       	ldd	r24, Y+23	; 0x17
    1842:	98 8d       	ldd	r25, Y+24	; 0x18
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8c 87       	std	Y+12, r24	; 0x0c
    1856:	9d 87       	std	Y+13, r25	; 0x0d
    1858:	ae 87       	std	Y+14, r26	; 0x0e
    185a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185c:	6c 85       	ldd	r22, Y+12	; 0x0c
    185e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1860:	8e 85       	ldd	r24, Y+14	; 0x0e
    1862:	9f 85       	ldd	r25, Y+15	; 0x0f
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	53 e4       	ldi	r21, 0x43	; 67
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	88 87       	std	Y+8, r24	; 0x08
    1876:	99 87       	std	Y+9, r25	; 0x09
    1878:	aa 87       	std	Y+10, r26	; 0x0a
    187a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    187c:	68 85       	ldd	r22, Y+8	; 0x08
    187e:	79 85       	ldd	r23, Y+9	; 0x09
    1880:	8a 85       	ldd	r24, Y+10	; 0x0a
    1882:	9b 85       	ldd	r25, Y+11	; 0x0b
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	2c f4       	brge	.+10     	; 0x189e <CLCD_voidInit+0x988>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	9f 83       	std	Y+7, r25	; 0x07
    189a:	8e 83       	std	Y+6, r24	; 0x06
    189c:	3f c0       	rjmp	.+126    	; 0x191c <CLCD_voidInit+0xa06>
	else if (__tmp > 65535)
    189e:	68 85       	ldd	r22, Y+8	; 0x08
    18a0:	79 85       	ldd	r23, Y+9	; 0x09
    18a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	4f e7       	ldi	r20, 0x7F	; 127
    18ac:	57 e4       	ldi	r21, 0x47	; 71
    18ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	4c f5       	brge	.+82     	; 0x1908 <CLCD_voidInit+0x9f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    18b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    18bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	9f 83       	std	Y+7, r25	; 0x07
    18dc:	8e 83       	std	Y+6, r24	; 0x06
    18de:	0f c0       	rjmp	.+30     	; 0x18fe <CLCD_voidInit+0x9e8>
    18e0:	89 e1       	ldi	r24, 0x19	; 25
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9d 83       	std	Y+5, r25	; 0x05
    18e6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <CLCD_voidInit+0x9d6>
    18f0:	9d 83       	std	Y+5, r25	; 0x05
    18f2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	9f 83       	std	Y+7, r25	; 0x07
    18fc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1900:	9f 81       	ldd	r25, Y+7	; 0x07
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f7       	brne	.-38     	; 0x18e0 <CLCD_voidInit+0x9ca>
    1906:	24 c0       	rjmp	.+72     	; 0x1950 <CLCD_voidInit+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	68 85       	ldd	r22, Y+8	; 0x08
    190a:	79 85       	ldd	r23, Y+9	; 0x09
    190c:	8a 85       	ldd	r24, Y+10	; 0x0a
    190e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	f1 f7       	brne	.-4      	; 0x1928 <CLCD_voidInit+0xa12>
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <CLCD_voidInit+0xa3a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1932:	69 89       	ldd	r22, Y+17	; 0x11
    1934:	7a 89       	ldd	r23, Y+18	; 0x12
    1936:	8b 89       	ldd	r24, Y+19	; 0x13
    1938:	9c 89       	ldd	r25, Y+20	; 0x14
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	88 8b       	std	Y+16, r24	; 0x10
    1944:	88 89       	ldd	r24, Y+16	; 0x10
    1946:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	8a 95       	dec	r24
    194c:	f1 f7       	brne	.-4      	; 0x194a <CLCD_voidInit+0xa34>
    194e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);							// mode:4 bit , display:2Lines , font:5x7 dots

		/*function set command : 2line ,5*8 front size*/
		CLCD_voidSendCommand(0b00111000);
    1950:	88 e3       	ldi	r24, 0x38	; 56
    1952:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

		/*diplaly on off control,display enable,cursor enable,blink enable*/
		CLCD_voidSendCommand(0b00001100);
    1956:	8c e0       	ldi	r24, 0x0C	; 12
    1958:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

		/*clear display*/
		CLCD_voidSendCommand(1);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	}

}
    1962:	c3 58       	subi	r28, 0x83	; 131
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <CLCD_voidSendString>:
void CLCD_voidSendString(const char* copy_string)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <CLCD_voidSendString+0x6>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	0a c0       	rjmp	.+20     	; 0x199e <CLCD_voidSendString+0x24>
	while(*copy_string !='\0')
	{
		CLCD_voidSendData(*copy_string);
    198a:	e9 81       	ldd	r30, Y+1	; 0x01
    198c:	fa 81       	ldd	r31, Y+2	; 0x02
    198e:	80 81       	ld	r24, Z
    1990:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>
		copy_string++;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	}

}
void CLCD_voidSendString(const char* copy_string)
{
	while(*copy_string !='\0')
    199e:	e9 81       	ldd	r30, Y+1	; 0x01
    19a0:	fa 81       	ldd	r31, Y+2	; 0x02
    19a2:	80 81       	ld	r24, Z
    19a4:	88 23       	and	r24, r24
    19a6:	89 f7       	brne	.-30     	; 0x198a <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*copy_string);
		copy_string++;

	}

}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <CLCD_voidGOTOXY>:
void CLCD_voidGOTOXY(u8 copy_u8xpostion,u8 copy_u8ypostion)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <CLCD_voidGOTOXY+0x6>
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8xpostion==0)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	88 23       	and	r24, r24
    19c6:	19 f4       	brne	.+6      	; 0x19ce <CLCD_voidGOTOXY+0x1c>
	{
		/*the location at the frist line */
		Local_u8Address=copy_u8ypostion;
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <CLCD_voidGOTOXY+0x28>
	}
	else if(copy_u8xpostion==1)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	19 f4       	brne	.+6      	; 0x19da <CLCD_voidGOTOXY+0x28>
	{
		/*the location at the second line*/
		Local_u8Address=0x40+copy_u8ypostion;
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	80 5c       	subi	r24, 0xC0	; 192
    19d8:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit 7 in DDRAM address and send command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	80 58       	subi	r24, 0x80	; 128
    19de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <CLCD_voidWrite_SpacialC>:

void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	27 97       	sbiw	r28, 0x07	; 7
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
    1a06:	6d 83       	std	Y+5, r22	; 0x05
    1a08:	4e 83       	std	Y+6, r20	; 0x06
    1a0a:	2f 83       	std	Y+7, r18	; 0x07
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(address+64);
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 5c       	subi	r24, 0xC0	; 192
    1a24:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    1a28:	19 82       	std	Y+1, r1	; 0x01
    1a2a:	0e c0       	rjmp	.+28     	; 0x1a48 <CLCD_voidWrite_SpacialC+0x5a>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	fc 01       	movw	r30, r24
    1a38:	e2 0f       	add	r30, r18
    1a3a:	f3 1f       	adc	r31, r19
    1a3c:	80 81       	ld	r24, Z
    1a3e:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>
void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
	CLCD_voidSendCommand(address+64);
	for(u8 i=0;i<8;i++)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	78 f3       	brcs	.-34     	; 0x1a2c <CLCD_voidWrite_SpacialC+0x3e>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
	}
	/*return to dd ram*/
	CLCD_voidGOTOXY(copy_u8xpos	, copy_u8ypos);
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	6f 81       	ldd	r22, Y+7	; 0x07
    1a52:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>

	CLCD_voidSendData(copy_u8Blocknum);
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>

}
    1a5c:	27 96       	adiw	r28, 0x07	; 7
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <CLCD_voidNumber>:
void CLCD_voidNumber(u32 copy_u32Number)
{
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	61 97       	sbiw	r28, 0x11	; 17
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	6e 87       	std	Y+14, r22	; 0x0e
    1a88:	7f 87       	std	Y+15, r23	; 0x0f
    1a8a:	88 8b       	std	Y+16, r24	; 0x10
    1a8c:	99 8b       	std	Y+17, r25	; 0x11

	/*create arr of char from 11 element*/
	char buf[12];  // max 10 digits + null terminator
	uint8_t i = 10;
    1a8e:	8a e0       	ldi	r24, 0x0A	; 10
    1a90:	89 83       	std	Y+1, r24	; 0x01
	buf[i--] = '\0';
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	ce 01       	movw	r24, r28
    1a9a:	02 96       	adiw	r24, 0x02	; 2
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e2 0f       	add	r30, r18
    1aa0:	f3 1f       	adc	r31, r19
    1aa2:	10 82       	st	Z, r1
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	81 50       	subi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	do {
		buf[i--] = copy_u32Number % 10 + '0';
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	08 2f       	mov	r16, r24
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab4:	a8 89       	ldd	r26, Y+16	; 0x10
    1ab6:	b9 89       	ldd	r27, Y+17	; 0x11
    1ab8:	2a e0       	ldi	r18, 0x0A	; 10
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	28 2f       	mov	r18, r24
    1ace:	20 5d       	subi	r18, 0xD0	; 208
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	02 96       	adiw	r24, 0x02	; 2
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	e0 0f       	add	r30, r16
    1ad8:	f1 1f       	adc	r31, r17
    1ada:	20 83       	st	Z, r18
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	81 50       	subi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
		copy_u32Number /= 10;
    1ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ae8:	b9 89       	ldd	r27, Y+17	; 0x11
    1aea:	2a e0       	ldi	r18, 0x0A	; 10
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    1afa:	da 01       	movw	r26, r20
    1afc:	c9 01       	movw	r24, r18
    1afe:	8e 87       	std	Y+14, r24	; 0x0e
    1b00:	9f 87       	std	Y+15, r25	; 0x0f
    1b02:	a8 8b       	std	Y+16, r26	; 0x10
    1b04:	b9 8b       	std	Y+17, r27	; 0x11
	} while (copy_u32Number > 0 && i > 0);
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b0c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	a1 05       	cpc	r26, r1
    1b12:	b1 05       	cpc	r27, r1
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <CLCD_voidNumber+0xae>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	88 23       	and	r24, r24
    1b1a:	39 f6       	brne	.-114    	; 0x1aaa <CLCD_voidNumber+0x3c>
	CLCD_voidSendString(&buf[i+1]);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9c 01       	movw	r18, r24
    1b24:	2f 5f       	subi	r18, 0xFF	; 255
    1b26:	3f 4f       	sbci	r19, 0xFF	; 255
    1b28:	ce 01       	movw	r24, r28
    1b2a:	02 96       	adiw	r24, 0x02	; 2
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	0e 94 bd 0c 	call	0x197a	; 0x197a <CLCD_voidSendString>
		}
	}



}
    1b34:	61 96       	adiw	r28, 0x11	; 17
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <CLCD_voidWritename.1449>:
		buf[i--] = copy_u32Number % 10 + '0';
		copy_u32Number /= 10;
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <CLCD_voidWritename.1449+0x6>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <CLCD_voidWritename.1449+0x8>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9b 83       	std	Y+3, r25	; 0x03
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	6c 83       	std	Y+4, r22	; 0x04

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    1b5c:	19 82       	std	Y+1, r1	; 0x01
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <CLCD_voidWritename.1449+0x3c>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	e2 0f       	add	r30, r18
    1b6e:	f3 1f       	adc	r31, r19
    1b70:	80 81       	ld	r24, Z
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	69 81       	ldd	r22, Y+1	; 0x01
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	29 81       	ldd	r18, Y+1	; 0x01
    1b7c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <CLCD_voidWrite_SpacialC>
	} while (copy_u32Number > 0 && i > 0);
	CLCD_voidSendString(&buf[i+1]);
	void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
	{

		for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	99 81       	ldd	r25, Y+1	; 0x01
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	98 17       	cp	r25, r24
    1b8c:	48 f3       	brcs	.-46     	; 0x1b60 <CLCD_voidWritename.1449+0x16>
		{
			CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
		}
	}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <LCD_ClearScreen>:



}
void LCD_ClearScreen()
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLEAR_COMMAND);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <CLCD_voidCursorShift>:


void CLCD_voidCursorShift(u8 dircation)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	88 23       	and	r24, r24
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <CLCD_voidCursorShift+0x1a>
		CLCD_voidSendCommand(0x14);
    1bc2:	84 e1       	ldi	r24, 0x14	; 20
    1bc4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <CLCD_voidCursorShift+0x26>
	else if(dircation==Left)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <CLCD_voidCursorShift+0x26>
		CLCD_voidSendCommand(0x10);
    1bd0:	80 e1       	ldi	r24, 0x10	; 16
    1bd2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
}
    1bd6:	0f 90       	pop	r0
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <CLCD_voidDataShift>:

void CLCD_voidDataShift(u8 dircation)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	0f 92       	push	r0
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	88 23       	and	r24, r24
    1bee:	21 f4       	brne	.+8      	; 0x1bf8 <CLCD_voidDataShift+0x1a>
		CLCD_voidSendCommand(0x1c);
    1bf0:	8c e1       	ldi	r24, 0x1C	; 28
    1bf2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <CLCD_voidDataShift+0x26>
	else if(dircation==Left)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	19 f4       	brne	.+6      	; 0x1c04 <CLCD_voidDataShift+0x26>
		CLCD_voidSendCommand(0x18);
    1bfe:	88 e1       	ldi	r24, 0x18	; 24
    1c00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <CLCD_voidSendCommand>

}
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <setbitvalue>:




u8 setbitvalue(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	28 97       	sbiw	r28, 0x08	; 8
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	6b 83       	std	Y+3, r22	; 0x03
    1c24:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1c26:	19 82       	std	Y+1, r1	; 0x01
     if(copy_u8pin<=DIO_u8PIN7)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	88 30       	cpi	r24, 0x08	; 8
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <setbitvalue+0x24>
    1c2e:	f4 c0       	rjmp	.+488    	; 0x1e18 <setbitvalue+0x20c>
    {
        if(copy_u8value==DIO_u8PIN_LOW)
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	88 23       	and	r24, r24
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <setbitvalue+0x2c>
    1c36:	77 c0       	rjmp	.+238    	; 0x1d26 <setbitvalue+0x11a>
        {
            switch(copy_u8port)
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	38 87       	std	Y+8, r19	; 0x08
    1c40:	2f 83       	std	Y+7, r18	; 0x07
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	59 f1       	breq	.+86     	; 0x1ca2 <setbitvalue+0x96>
    1c4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c4e:	38 85       	ldd	r19, Y+8	; 0x08
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <setbitvalue+0x54>
    1c56:	8f 81       	ldd	r24, Y+7	; 0x07
    1c58:	98 85       	ldd	r25, Y+8	; 0x08
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f0       	breq	.+26     	; 0x1c78 <setbitvalue+0x6c>
    1c5e:	60 c0       	rjmp	.+192    	; 0x1d20 <setbitvalue+0x114>
    1c60:	2f 81       	ldd	r18, Y+7	; 0x07
    1c62:	38 85       	ldd	r19, Y+8	; 0x08
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	89 f1       	breq	.+98     	; 0x1ccc <setbitvalue+0xc0>
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <setbitvalue+0x6a>
    1c74:	40 c0       	rjmp	.+128    	; 0x1cf6 <setbitvalue+0xea>
    1c76:	54 c0       	rjmp	.+168    	; 0x1d20 <setbitvalue+0x114>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,copy_u8pin); break;
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <setbitvalue+0x8a>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <setbitvalue+0x86>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	bd c0       	rjmp	.+378    	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTB : CLR_BIT(PORTB,copy_u8pin); break;
    1ca2:	a8 e3       	ldi	r26, 0x38	; 56
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e8 e3       	ldi	r30, 0x38	; 56
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <setbitvalue+0xb4>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <setbitvalue+0xb0>
    1cc4:	80 95       	com	r24
    1cc6:	84 23       	and	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	a8 c0       	rjmp	.+336    	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTC : CLR_BIT(PORTC,copy_u8pin); break;
    1ccc:	a5 e3       	ldi	r26, 0x35	; 53
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <setbitvalue+0xde>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <setbitvalue+0xda>
    1cee:	80 95       	com	r24
    1cf0:	84 23       	and	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	93 c0       	rjmp	.+294    	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTD : CLR_BIT(PORTD,copy_u8pin); break;
    1cf6:	a2 e3       	ldi	r26, 0x32	; 50
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <setbitvalue+0x108>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <setbitvalue+0x104>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	7e c0       	rjmp	.+252    	; 0x1e1c <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	7b c0       	rjmp	.+246    	; 0x1e1c <setbitvalue+0x210>
            }
        }
        else if(copy_u8value ==DIO_u8PIN_HIGH)
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <setbitvalue+0x122>
    1d2c:	72 c0       	rjmp	.+228    	; 0x1e12 <setbitvalue+0x206>
        {
            switch(copy_u8port)
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3e 83       	std	Y+6, r19	; 0x06
    1d36:	2d 83       	std	Y+5, r18	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	49 f1       	breq	.+82     	; 0x1d94 <setbitvalue+0x188>
    1d42:	2d 81       	ldd	r18, Y+5	; 0x05
    1d44:	3e 81       	ldd	r19, Y+6	; 0x06
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <setbitvalue+0x14a>
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f0       	breq	.+24     	; 0x1d6c <setbitvalue+0x160>
    1d54:	5b c0       	rjmp	.+182    	; 0x1e0c <setbitvalue+0x200>
    1d56:	2d 81       	ldd	r18, Y+5	; 0x05
    1d58:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	71 f1       	breq	.+92     	; 0x1dbc <setbitvalue+0x1b0>
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	e9 f1       	breq	.+122    	; 0x1de4 <setbitvalue+0x1d8>
    1d6a:	50 c0       	rjmp	.+160    	; 0x1e0c <setbitvalue+0x200>
            {
                case DIO_u8PORTA : SET_BIT(PORTA,copy_u8pin); break;
    1d6c:	ab e3       	ldi	r26, 0x3B	; 59
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	eb e3       	ldi	r30, 0x3B	; 59
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <setbitvalue+0x17e>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <setbitvalue+0x17a>
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	44 c0       	rjmp	.+136    	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTB : SET_BIT(PORTB,copy_u8pin); break;
    1d94:	a8 e3       	ldi	r26, 0x38	; 56
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e8 e3       	ldi	r30, 0x38	; 56
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <setbitvalue+0x1a6>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <setbitvalue+0x1a2>
    1db6:	84 2b       	or	r24, r20
    1db8:	8c 93       	st	X, r24
    1dba:	30 c0       	rjmp	.+96     	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTC : SET_BIT(PORTC,copy_u8pin); break;
    1dbc:	a5 e3       	ldi	r26, 0x35	; 53
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e5 e3       	ldi	r30, 0x35	; 53
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	48 2f       	mov	r20, r24
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	02 2e       	mov	r0, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <setbitvalue+0x1ce>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	0a 94       	dec	r0
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <setbitvalue+0x1ca>
    1dde:	84 2b       	or	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	1c c0       	rjmp	.+56     	; 0x1e1c <setbitvalue+0x210>
                case DIO_u8PORTD : SET_BIT(PORTD,copy_u8pin); break;
    1de4:	a2 e3       	ldi	r26, 0x32	; 50
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <setbitvalue+0x1f6>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <setbitvalue+0x1f2>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	05 c0       	rjmp	.+10     	; 0x1e1c <setbitvalue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <setbitvalue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    }
        
    return Local_u8ErrorState;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1e:	28 96       	adiw	r28, 0x08	; 8
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <setportvalue>:
u8 setportvalue (u8 copy_u8port,u8 copy_u8value)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <setportvalue+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <setportvalue+0x8>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState=0;
    1e42:	19 82       	std	Y+1, r1	; 0x01
      switch(copy_u8port)
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	3d 83       	std	Y+5, r19	; 0x05
    1e4c:	2c 83       	std	Y+4, r18	; 0x04
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	91 05       	cpc	r25, r1
    1e56:	d1 f0       	breq	.+52     	; 0x1e8c <setportvalue+0x5c>
    1e58:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5c:	22 30       	cpi	r18, 0x02	; 2
    1e5e:	31 05       	cpc	r19, r1
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <setportvalue+0x3c>
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	61 f0       	breq	.+24     	; 0x1e82 <setportvalue+0x52>
    1e6a:	1f c0       	rjmp	.+62     	; 0x1eaa <setportvalue+0x7a>
    1e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	81 f0       	breq	.+32     	; 0x1e96 <setportvalue+0x66>
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	81 f0       	breq	.+32     	; 0x1ea0 <setportvalue+0x70>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <setportvalue+0x7a>
    {
        case DIO_u8PORTA: PORTA=copy_u8value; break; 
    1e82:	eb e3       	ldi	r30, 0x3B	; 59
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	80 83       	st	Z, r24
    1e8a:	11 c0       	rjmp	.+34     	; 0x1eae <setportvalue+0x7e>
        case DIO_u8PORTB: PORTB=copy_u8value; break; 
    1e8c:	e8 e3       	ldi	r30, 0x38	; 56
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	80 83       	st	Z, r24
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <setportvalue+0x7e>
        case DIO_u8PORTC: PORTC=copy_u8value; break; 
    1e96:	e5 e3       	ldi	r30, 0x35	; 53
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	80 83       	st	Z, r24
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <setportvalue+0x7e>
        case DIO_u8PORTD: PORTD=copy_u8value; break; 
    1ea0:	e2 e3       	ldi	r30, 0x32	; 50
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	80 83       	st	Z, r24
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <setportvalue+0x7e>
        default: Local_u8ErrorState=1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
          
    }
    
     return Local_u8ErrorState;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <getbit>:

u8 getbit (u8 copy_port ,u8 copy_pin,u8* copy_value)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	27 97       	sbiw	r28, 0x07	; 7
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	8a 83       	std	Y+2, r24	; 0x02
    1ed6:	6b 83       	std	Y+3, r22	; 0x03
    1ed8:	5d 83       	std	Y+5, r21	; 0x05
    1eda:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    1edc:	19 82       	std	Y+1, r1	; 0x01
     if((copy_value!=NULL )  &&(copy_pin<=DIO_u8PIN7))
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <getbit+0x28>
    1ee6:	78 c0       	rjmp	.+240    	; 0x1fd8 <getbit+0x118>
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 30       	cpi	r24, 0x08	; 8
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <getbit+0x30>
    1eee:	74 c0       	rjmp	.+232    	; 0x1fd8 <getbit+0x118>
     {
         switch(copy_port)
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	3f 83       	std	Y+7, r19	; 0x07
    1ef8:	2e 83       	std	Y+6, r18	; 0x06
    1efa:	4e 81       	ldd	r20, Y+6	; 0x06
    1efc:	5f 81       	ldd	r21, Y+7	; 0x07
    1efe:	41 30       	cpi	r20, 0x01	; 1
    1f00:	51 05       	cpc	r21, r1
    1f02:	59 f1       	breq	.+86     	; 0x1f5a <getbit+0x9a>
    1f04:	8e 81       	ldd	r24, Y+6	; 0x06
    1f06:	9f 81       	ldd	r25, Y+7	; 0x07
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	34 f4       	brge	.+12     	; 0x1f1a <getbit+0x5a>
    1f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f10:	3f 81       	ldd	r19, Y+7	; 0x07
    1f12:	21 15       	cp	r18, r1
    1f14:	31 05       	cpc	r19, r1
    1f16:	69 f0       	breq	.+26     	; 0x1f32 <getbit+0x72>
    1f18:	5c c0       	rjmp	.+184    	; 0x1fd2 <getbit+0x112>
    1f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f1e:	42 30       	cpi	r20, 0x02	; 2
    1f20:	51 05       	cpc	r21, r1
    1f22:	79 f1       	breq	.+94     	; 0x1f82 <getbit+0xc2>
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <getbit+0x70>
    1f2e:	3d c0       	rjmp	.+122    	; 0x1faa <getbit+0xea>
    1f30:	50 c0       	rjmp	.+160    	; 0x1fd2 <getbit+0x112>
         {
             case DIO_u8PORTA: *copy_value=GET_BIT(PINA,copy_pin);  break;
    1f32:	e9 e3       	ldi	r30, 0x39	; 57
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a9 01       	movw	r20, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <getbit+0x8a>
    1f46:	55 95       	asr	r21
    1f48:	47 95       	ror	r20
    1f4a:	8a 95       	dec	r24
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <getbit+0x86>
    1f4e:	ca 01       	movw	r24, r20
    1f50:	81 70       	andi	r24, 0x01	; 1
    1f52:	ec 81       	ldd	r30, Y+4	; 0x04
    1f54:	fd 81       	ldd	r31, Y+5	; 0x05
    1f56:	80 83       	st	Z, r24
    1f58:	41 c0       	rjmp	.+130    	; 0x1fdc <getbit+0x11c>
             case DIO_u8PORTB: *copy_value=GET_BIT(PINB,copy_pin);  break;
    1f5a:	e6 e3       	ldi	r30, 0x36	; 54
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <getbit+0xb2>
    1f6e:	55 95       	asr	r21
    1f70:	47 95       	ror	r20
    1f72:	8a 95       	dec	r24
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <getbit+0xae>
    1f76:	ca 01       	movw	r24, r20
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7e:	80 83       	st	Z, r24
    1f80:	2d c0       	rjmp	.+90     	; 0x1fdc <getbit+0x11c>
             case DIO_u8PORTC: *copy_value=GET_BIT(PINC,copy_pin);  break;
    1f82:	e3 e3       	ldi	r30, 0x33	; 51
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a9 01       	movw	r20, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <getbit+0xda>
    1f96:	55 95       	asr	r21
    1f98:	47 95       	ror	r20
    1f9a:	8a 95       	dec	r24
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <getbit+0xd6>
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	81 70       	andi	r24, 0x01	; 1
    1fa2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa6:	80 83       	st	Z, r24
    1fa8:	19 c0       	rjmp	.+50     	; 0x1fdc <getbit+0x11c>
             case DIO_u8PORTD: *copy_value=GET_BIT(PIND,copy_pin);  break;
    1faa:	e0 e3       	ldi	r30, 0x30	; 48
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a9 01       	movw	r20, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <getbit+0x102>
    1fbe:	55 95       	asr	r21
    1fc0:	47 95       	ror	r20
    1fc2:	8a 95       	dec	r24
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <getbit+0xfe>
    1fc6:	ca 01       	movw	r24, r20
    1fc8:	81 70       	andi	r24, 0x01	; 1
    1fca:	ec 81       	ldd	r30, Y+4	; 0x04
    1fcc:	fd 81       	ldd	r31, Y+5	; 0x05
    1fce:	80 83       	st	Z, r24
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <getbit+0x11c>
             
             default: Local_u8ErrorState=1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <getbit+0x11c>
             
         }
     }
     else
     {
         Local_u8ErrorState=1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
     }
     
    
     return Local_u8ErrorState;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fde:	27 96       	adiw	r28, 0x07	; 7
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <togglebit>:
u8 togglebit(u8 copy_u8Port, u8 copy_u8Pin)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <togglebit+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <togglebit+0x8>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2002:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8Pin<=DIO_u8PIN7)
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 30       	cpi	r24, 0x08	; 8
    2008:	08 f0       	brcs	.+2      	; 0x200c <togglebit+0x1c>
    200a:	72 c0       	rjmp	.+228    	; 0x20f0 <togglebit+0x100>
	{
		switch(copy_u8Port)
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	2c 83       	std	Y+4, r18	; 0x04
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	91 05       	cpc	r25, r1
    201e:	49 f1       	breq	.+82     	; 0x2072 <togglebit+0x82>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	31 05       	cpc	r19, r1
    2028:	2c f4       	brge	.+10     	; 0x2034 <togglebit+0x44>
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	61 f0       	breq	.+24     	; 0x204a <togglebit+0x5a>
    2032:	5b c0       	rjmp	.+182    	; 0x20ea <togglebit+0xfa>
    2034:	2c 81       	ldd	r18, Y+4	; 0x04
    2036:	3d 81       	ldd	r19, Y+5	; 0x05
    2038:	22 30       	cpi	r18, 0x02	; 2
    203a:	31 05       	cpc	r19, r1
    203c:	71 f1       	breq	.+92     	; 0x209a <togglebit+0xaa>
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	9d 81       	ldd	r25, Y+5	; 0x05
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	e9 f1       	breq	.+122    	; 0x20c2 <togglebit+0xd2>
    2048:	50 c0       	rjmp	.+160    	; 0x20ea <togglebit+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,copy_u8Pin); break;
    204a:	ab e3       	ldi	r26, 0x3B	; 59
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	eb e3       	ldi	r30, 0x3B	; 59
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	48 2f       	mov	r20, r24
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <togglebit+0x78>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <togglebit+0x74>
    206c:	84 27       	eor	r24, r20
    206e:	8c 93       	st	X, r24
    2070:	41 c0       	rjmp	.+130    	; 0x20f4 <togglebit+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,copy_u8Pin); break;
    2072:	a8 e3       	ldi	r26, 0x38	; 56
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e8 e3       	ldi	r30, 0x38	; 56
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <togglebit+0xa0>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <togglebit+0x9c>
    2094:	84 27       	eor	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	2d c0       	rjmp	.+90     	; 0x20f4 <togglebit+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,copy_u8Pin); break;
    209a:	a5 e3       	ldi	r26, 0x35	; 53
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e5 e3       	ldi	r30, 0x35	; 53
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 2e       	mov	r0, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <togglebit+0xc8>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <togglebit+0xc4>
    20bc:	84 27       	eor	r24, r20
    20be:	8c 93       	st	X, r24
    20c0:	19 c0       	rjmp	.+50     	; 0x20f4 <togglebit+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,copy_u8Pin); break;
    20c2:	a2 e3       	ldi	r26, 0x32	; 50
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e2 e3       	ldi	r30, 0x32	; 50
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <togglebit+0xf0>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <togglebit+0xec>
    20e4:	84 27       	eor	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <togglebit+0x104>
		default: Local_u8ErrorState=1; break;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <togglebit+0x104>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <PORT_voidInti>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInti(void)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_drive;
    210e:	ea e3       	ldi	r30, 0x3A	; 58
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	80 83       	st	Z, r24
	DDRB=PORTB_drive;
    2116:	e7 e3       	ldi	r30, 0x37	; 55
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	87 e0       	ldi	r24, 0x07	; 7
    211c:	80 83       	st	Z, r24
	DDRC=PORTC_drive;
    211e:	e4 e3       	ldi	r30, 0x34	; 52
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	10 82       	st	Z, r1
	DDRD=PORTD_drive;
    2124:	e1 e3       	ldi	r30, 0x31	; 49
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	10 82       	st	Z, r1
	
	PORTA=PORTA_INTI_VALUE;
    212a:	eb e3       	ldi	r30, 0x3B	; 59
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	10 82       	st	Z, r1
	PORTB=PORTB_INTI_VALUE;
    2130:	e8 e3       	ldi	r30, 0x38	; 56
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	10 82       	st	Z, r1
	PORTC=PORTC_INTI_VALUE;
    2136:	e5 e3       	ldi	r30, 0x35	; 53
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	83 e0       	ldi	r24, 0x03	; 3
    213c:	80 83       	st	Z, r24
	PORTD=PORTD_INTI_VALUE;
    213e:	e2 e3       	ldi	r30, 0x32	; 50
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	10 82       	st	Z, r1

}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <main>:
void ball_position();
void displaygame();


void  main(void)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62

	PORT_voidInti();
    2152:	0e 94 83 10 	call	0x2106	; 0x2106 <PORT_voidInti>
	CLCD_voidInit(0);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 8b 07 	call	0xf16	; 0xf16 <CLCD_voidInit>


	while(1){


		movePaddles();
    215c:	0e 94 b5 10 	call	0x216a	; 0x216a <movePaddles>
		ball_position();
    2160:	0e 94 e6 10 	call	0x21cc	; 0x21cc <ball_position>
		displaygame();
    2164:	0e 94 09 11 	call	0x2212	; 0x2212 <displaygame>
    2168:	f9 cf       	rjmp	.-14     	; 0x215c <main+0x12>

0000216a <movePaddles>:


	}
}

void movePaddles() {
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
  // Move the left paddle

	getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
    2172:	2d e8       	ldi	r18, 0x8D	; 141
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	a9 01       	movw	r20, r18
    217c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <getbit>
	if(left_value==0)
    2180:	80 91 8d 00 	lds	r24, 0x008D
    2184:	88 23       	and	r24, r24
    2186:	51 f4       	brne	.+20     	; 0x219c <movePaddles+0x32>
	{
		if(leftPaddlePosition==0)
    2188:	80 91 86 00 	lds	r24, 0x0086
    218c:	88 23       	and	r24, r24
    218e:	21 f4       	brne	.+8      	; 0x2198 <movePaddles+0x2e>
		{
			leftPaddlePosition=1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 86 00 	sts	0x0086, r24
    2196:	02 c0       	rjmp	.+4      	; 0x219c <movePaddles+0x32>
					}
		else
		{
			leftPaddlePosition=0;
    2198:	10 92 86 00 	sts	0x0086, r1

		}

	}
	/* move right paddle*/
	getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
    219c:	2a e8       	ldi	r18, 0x8A	; 138
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	a9 01       	movw	r20, r18
    21a6:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <getbit>
	if(right_value==0)
    21aa:	80 91 8a 00 	lds	r24, 0x008A
    21ae:	88 23       	and	r24, r24
    21b0:	51 f4       	brne	.+20     	; 0x21c6 <movePaddles+0x5c>
	{
		if(rightPaddlePosition==0)
    21b2:	80 91 87 00 	lds	r24, 0x0087
    21b6:	88 23       	and	r24, r24
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <movePaddles+0x58>
		{
			rightPaddlePosition=1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 87 00 	sts	0x0087, r24
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <movePaddles+0x5c>
		}
		else
		{
			rightPaddlePosition=0;
    21c2:	10 92 87 00 	sts	0x0087, r1
		}

	}


  }
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <ball_position>:
void ball_position()
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	if(dir==0)
    21d4:	80 91 8c 00 	lds	r24, 0x008C
    21d8:	88 23       	and	r24, r24
    21da:	31 f4       	brne	.+12     	; 0x21e8 <ball_position+0x1c>
	{
		ball++;
    21dc:	80 91 85 00 	lds	r24, 0x0085
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 93 85 00 	sts	0x0085, r24
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <ball_position+0x26>
	}
	else ball--;
    21e8:	80 91 85 00 	lds	r24, 0x0085
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	80 93 85 00 	sts	0x0085, r24

	if(ball==1||ball==14)
    21f2:	80 91 85 00 	lds	r24, 0x0085
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	21 f0       	breq	.+8      	; 0x2202 <ball_position+0x36>
    21fa:	80 91 85 00 	lds	r24, 0x0085
    21fe:	8e 30       	cpi	r24, 0x0E	; 14
    2200:	29 f4       	brne	.+10     	; 0x220c <ball_position+0x40>
		dir= ~dir;
    2202:	80 91 8c 00 	lds	r24, 0x008C
    2206:	80 95       	com	r24
    2208:	80 93 8c 00 	sts	0x008C, r24

}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <displaygame>:
void displaygame()
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	aa 97       	sbiw	r28, 0x2a	; 42
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearScreen();
    2226:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_ClearScreen>

	/* set postion of left paddle*/
	CLCD_voidGOTOXY(leftPaddlePosition	, 0);
    222a:	80 91 86 00 	lds	r24, 0x0086
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>
	CLCD_voidSendData('|');
    2234:	8c e7       	ldi	r24, 0x7C	; 124
    2236:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>
    223a:	07 c0       	rjmp	.+14     	; 0x224a <displaygame+0x38>
	while(!left_value)
	{
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
    223c:	2d e8       	ldi	r18, 0x8D	; 141
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <getbit>
	LCD_ClearScreen();

	/* set postion of left paddle*/
	CLCD_voidGOTOXY(leftPaddlePosition	, 0);
	CLCD_voidSendData('|');
	while(!left_value)
    224a:	80 91 8d 00 	lds	r24, 0x008D
    224e:	88 23       	and	r24, r24
    2250:	a9 f3       	breq	.-22     	; 0x223c <displaygame+0x2a>
	{
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
	}
	/* set postion of right paddle*/
	CLCD_voidGOTOXY(rightPaddlePosition	, 15);
    2252:	80 91 87 00 	lds	r24, 0x0087
    2256:	6f e0       	ldi	r22, 0x0F	; 15
    2258:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>
	CLCD_voidSendData('|');
    225c:	8c e7       	ldi	r24, 0x7C	; 124
    225e:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <displaygame+0x60>
	while(!right_value)
	{
		getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
    2264:	2a e8       	ldi	r18, 0x8A	; 138
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	a9 01       	movw	r20, r18
    226e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <getbit>
		getbit(DIO_u8PORTC, DIO_u8PIN0, &left_value);
	}
	/* set postion of right paddle*/
	CLCD_voidGOTOXY(rightPaddlePosition	, 15);
	CLCD_voidSendData('|');
	while(!right_value)
    2272:	80 91 8a 00 	lds	r24, 0x008A
    2276:	88 23       	and	r24, r24
    2278:	a9 f3       	breq	.-22     	; 0x2264 <displaygame+0x52>
	{
		getbit(DIO_u8PORTC, DIO_u8PIN1, &right_value);
	}

	/* set postion of ball 	*/
	CLCD_voidGOTOXY(0, ball);
    227a:	90 91 85 00 	lds	r25, 0x0085
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	69 2f       	mov	r22, r25
    2282:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>
	CLCD_voidSendData('0');
    2286:	80 e3       	ldi	r24, 0x30	; 48
    2288:	0e 94 ed 06 	call	0xdda	; 0xdda <CLCD_voidSendData>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a8 ec       	ldi	r26, 0xC8	; 200
    2292:	b2 e4       	ldi	r27, 0x42	; 66
    2294:	8f a3       	std	Y+39, r24	; 0x27
    2296:	98 a7       	std	Y+40, r25	; 0x28
    2298:	a9 a7       	std	Y+41, r26	; 0x29
    229a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6f a1       	ldd	r22, Y+39	; 0x27
    229e:	78 a5       	ldd	r23, Y+40	; 0x28
    22a0:	89 a5       	ldd	r24, Y+41	; 0x29
    22a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	53 e4       	ldi	r21, 0x43	; 67
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8b a3       	std	Y+35, r24	; 0x23
    22b6:	9c a3       	std	Y+36, r25	; 0x24
    22b8:	ad a3       	std	Y+37, r26	; 0x25
    22ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22bc:	6b a1       	ldd	r22, Y+35	; 0x23
    22be:	7c a1       	ldd	r23, Y+36	; 0x24
    22c0:	8d a1       	ldd	r24, Y+37	; 0x25
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <displaygame+0xcc>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9a a3       	std	Y+34, r25	; 0x22
    22da:	89 a3       	std	Y+33, r24	; 0x21
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <displaygame+0x14a>
	else if (__tmp > 65535)
    22de:	6b a1       	ldd	r22, Y+35	; 0x23
    22e0:	7c a1       	ldd	r23, Y+36	; 0x24
    22e2:	8d a1       	ldd	r24, Y+37	; 0x25
    22e4:	9e a1       	ldd	r25, Y+38	; 0x26
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <displaygame+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6f a1       	ldd	r22, Y+39	; 0x27
    22f8:	78 a5       	ldd	r23, Y+40	; 0x28
    22fa:	89 a5       	ldd	r24, Y+41	; 0x29
    22fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9a a3       	std	Y+34, r25	; 0x22
    231c:	89 a3       	std	Y+33, r24	; 0x21
    231e:	0f c0       	rjmp	.+30     	; 0x233e <displaygame+0x12c>
    2320:	89 e1       	ldi	r24, 0x19	; 25
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	98 a3       	std	Y+32, r25	; 0x20
    2326:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2328:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232a:	98 a1       	ldd	r25, Y+32	; 0x20
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <displaygame+0x11a>
    2330:	98 a3       	std	Y+32, r25	; 0x20
    2332:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	89 a1       	ldd	r24, Y+33	; 0x21
    2336:	9a a1       	ldd	r25, Y+34	; 0x22
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9a a3       	std	Y+34, r25	; 0x22
    233c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	89 a1       	ldd	r24, Y+33	; 0x21
    2340:	9a a1       	ldd	r25, Y+34	; 0x22
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <displaygame+0x10e>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <displaygame+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6b a1       	ldd	r22, Y+35	; 0x23
    234a:	7c a1       	ldd	r23, Y+36	; 0x24
    234c:	8d a1       	ldd	r24, Y+37	; 0x25
    234e:	9e a1       	ldd	r25, Y+38	; 0x26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9a a3       	std	Y+34, r25	; 0x22
    235a:	89 a3       	std	Y+33, r24	; 0x21
    235c:	89 a1       	ldd	r24, Y+33	; 0x21
    235e:	9a a1       	ldd	r25, Y+34	; 0x22
    2360:	9e 8f       	std	Y+30, r25	; 0x1e
    2362:	8d 8f       	std	Y+29, r24	; 0x1d
    2364:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2366:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <displaygame+0x156>
    236c:	9e 8f       	std	Y+30, r25	; 0x1e
    236e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	/* right score */
	if(ball ==1&&leftPaddlePosition==1)
    2370:	80 91 85 00 	lds	r24, 0x0085
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	09 f0       	breq	.+2      	; 0x237a <displaygame+0x168>
    2378:	9e c0       	rjmp	.+316    	; 0x24b6 <displaygame+0x2a4>
    237a:	80 91 86 00 	lds	r24, 0x0086
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	09 f0       	breq	.+2      	; 0x2384 <displaygame+0x172>
    2382:	99 c0       	rjmp	.+306    	; 0x24b6 <displaygame+0x2a4>
		{
			rightPlayerScore++;
    2384:	80 91 89 00 	lds	r24, 0x0089
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	80 93 89 00 	sts	0x0089, r24
			LCD_ClearScreen();
    238e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_ClearScreen>
			CLCD_voidSendString("right score = ");
    2392:	80 e6       	ldi	r24, 0x60	; 96
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 bd 0c 	call	0x197a	; 0x197a <CLCD_voidSendString>
			CLCD_voidNumber(rightPlayerScore);
    239a:	80 91 89 00 	lds	r24, 0x0089
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e0       	ldi	r26, 0x00	; 0
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <CLCD_voidNumber>
			CLCD_voidGOTOXY(1, 0);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>
			CLCD_voidSendString("left score = ");
    23b6:	8f e6       	ldi	r24, 0x6F	; 111
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 bd 0c 	call	0x197a	; 0x197a <CLCD_voidSendString>
			CLCD_voidNumber(leftPlayerScore);
    23be:	80 91 88 00 	lds	r24, 0x0088
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <CLCD_voidNumber>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	aa ef       	ldi	r26, 0xFA	; 250
    23d8:	b4 e4       	ldi	r27, 0x44	; 68
    23da:	89 8f       	std	Y+25, r24	; 0x19
    23dc:	9a 8f       	std	Y+26, r25	; 0x1a
    23de:	ab 8f       	std	Y+27, r26	; 0x1b
    23e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	69 8d       	ldd	r22, Y+25	; 0x19
    23e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a e7       	ldi	r20, 0x7A	; 122
    23f0:	53 e4       	ldi	r21, 0x43	; 67
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8d 8b       	std	Y+21, r24	; 0x15
    23fc:	9e 8b       	std	Y+22, r25	; 0x16
    23fe:	af 8b       	std	Y+23, r26	; 0x17
    2400:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <displaygame+0x212>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <displaygame+0x290>
	else if (__tmp > 65535)
    2424:	6d 89       	ldd	r22, Y+21	; 0x15
    2426:	7e 89       	ldd	r23, Y+22	; 0x16
    2428:	8f 89       	ldd	r24, Y+23	; 0x17
    242a:	98 8d       	ldd	r25, Y+24	; 0x18
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <displaygame+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	69 8d       	ldd	r22, Y+25	; 0x19
    243e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9c 8b       	std	Y+20, r25	; 0x14
    2462:	8b 8b       	std	Y+19, r24	; 0x13
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <displaygame+0x272>
    2466:	89 e1       	ldi	r24, 0x19	; 25
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9a 8b       	std	Y+18, r25	; 0x12
    246c:	89 8b       	std	Y+17, r24	; 0x11
    246e:	89 89       	ldd	r24, Y+17	; 0x11
    2470:	9a 89       	ldd	r25, Y+18	; 0x12
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <displaygame+0x260>
    2476:	9a 8b       	std	Y+18, r25	; 0x12
    2478:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	8b 89       	ldd	r24, Y+19	; 0x13
    247c:	9c 89       	ldd	r25, Y+20	; 0x14
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9c 8b       	std	Y+20, r25	; 0x14
    2482:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	8b 89       	ldd	r24, Y+19	; 0x13
    2486:	9c 89       	ldd	r25, Y+20	; 0x14
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <displaygame+0x254>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <displaygame+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9c 8b       	std	Y+20, r25	; 0x14
    24a0:	8b 8b       	std	Y+19, r24	; 0x13
    24a2:	8b 89       	ldd	r24, Y+19	; 0x13
    24a4:	9c 89       	ldd	r25, Y+20	; 0x14
    24a6:	98 8b       	std	Y+16, r25	; 0x10
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
    24aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ac:	98 89       	ldd	r25, Y+16	; 0x10
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <displaygame+0x29c>
    24b2:	98 8b       	std	Y+16, r25	; 0x10
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);

		}
	/* left score */
	if(ball == 14 && rightPaddlePosition==1)
    24b6:	80 91 85 00 	lds	r24, 0x0085
    24ba:	8e 30       	cpi	r24, 0x0E	; 14
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <displaygame+0x2ae>
    24be:	9e c0       	rjmp	.+316    	; 0x25fc <displaygame+0x3ea>
    24c0:	80 91 87 00 	lds	r24, 0x0087
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	09 f0       	breq	.+2      	; 0x24ca <displaygame+0x2b8>
    24c8:	99 c0       	rjmp	.+306    	; 0x25fc <displaygame+0x3ea>
	{

		leftPlayerScore++;LCD_ClearScreen();
    24ca:	80 91 88 00 	lds	r24, 0x0088
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	80 93 88 00 	sts	0x0088, r24
    24d4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_ClearScreen>
		CLCD_voidSendString("right score = ");
    24d8:	80 e6       	ldi	r24, 0x60	; 96
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 bd 0c 	call	0x197a	; 0x197a <CLCD_voidSendString>
		CLCD_voidNumber(rightPlayerScore);
    24e0:	80 91 89 00 	lds	r24, 0x0089
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e0       	ldi	r26, 0x00	; 0
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <CLCD_voidNumber>
		CLCD_voidGOTOXY(1, 0);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <CLCD_voidGOTOXY>
		CLCD_voidSendString("left score = ");
    24fc:	8f e6       	ldi	r24, 0x6F	; 111
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 bd 0c 	call	0x197a	; 0x197a <CLCD_voidSendString>
		CLCD_voidNumber(leftPlayerScore);
    2504:	80 91 88 00 	lds	r24, 0x0088
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e0       	ldi	r26, 0x00	; 0
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <CLCD_voidNumber>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	aa ef       	ldi	r26, 0xFA	; 250
    251e:	b4 e4       	ldi	r27, 0x44	; 68
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	9c 87       	std	Y+12, r25	; 0x0c
    2524:	ad 87       	std	Y+13, r26	; 0x0d
    2526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a e7       	ldi	r20, 0x7A	; 122
    2536:	53 e4       	ldi	r21, 0x43	; 67
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8f 83       	std	Y+7, r24	; 0x07
    2542:	98 87       	std	Y+8, r25	; 0x08
    2544:	a9 87       	std	Y+9, r26	; 0x09
    2546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <displaygame+0x358>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <displaygame+0x3d6>
	else if (__tmp > 65535)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <displaygame+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <displaygame+0x3b8>
    25ac:	89 e1       	ldi	r24, 0x19	; 25
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <displaygame+0x3a6>
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <displaygame+0x39a>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <displaygame+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <displaygame+0x3e2>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
	}
}
    25fc:	aa 96       	adiw	r28, 0x2a	; 42
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <__udivmodsi4>:
    260e:	a1 e2       	ldi	r26, 0x21	; 33
    2610:	1a 2e       	mov	r1, r26
    2612:	aa 1b       	sub	r26, r26
    2614:	bb 1b       	sub	r27, r27
    2616:	fd 01       	movw	r30, r26
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <__udivmodsi4_ep>

0000261a <__udivmodsi4_loop>:
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	ee 1f       	adc	r30, r30
    2620:	ff 1f       	adc	r31, r31
    2622:	a2 17       	cp	r26, r18
    2624:	b3 07       	cpc	r27, r19
    2626:	e4 07       	cpc	r30, r20
    2628:	f5 07       	cpc	r31, r21
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__udivmodsi4_ep>
    262c:	a2 1b       	sub	r26, r18
    262e:	b3 0b       	sbc	r27, r19
    2630:	e4 0b       	sbc	r30, r20
    2632:	f5 0b       	sbc	r31, r21

00002634 <__udivmodsi4_ep>:
    2634:	66 1f       	adc	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	1a 94       	dec	r1
    263e:	69 f7       	brne	.-38     	; 0x261a <__udivmodsi4_loop>
    2640:	60 95       	com	r22
    2642:	70 95       	com	r23
    2644:	80 95       	com	r24
    2646:	90 95       	com	r25
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	bd 01       	movw	r22, r26
    264e:	cf 01       	movw	r24, r30
    2650:	08 95       	ret

00002652 <__prologue_saves__>:
    2652:	2f 92       	push	r2
    2654:	3f 92       	push	r3
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	ca 1b       	sub	r28, r26
    267c:	db 0b       	sbc	r29, r27
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	09 94       	ijmp

0000268a <__epilogue_restores__>:
    268a:	2a 88       	ldd	r2, Y+18	; 0x12
    268c:	39 88       	ldd	r3, Y+17	; 0x11
    268e:	48 88       	ldd	r4, Y+16	; 0x10
    2690:	5f 84       	ldd	r5, Y+15	; 0x0f
    2692:	6e 84       	ldd	r6, Y+14	; 0x0e
    2694:	7d 84       	ldd	r7, Y+13	; 0x0d
    2696:	8c 84       	ldd	r8, Y+12	; 0x0c
    2698:	9b 84       	ldd	r9, Y+11	; 0x0b
    269a:	aa 84       	ldd	r10, Y+10	; 0x0a
    269c:	b9 84       	ldd	r11, Y+9	; 0x09
    269e:	c8 84       	ldd	r12, Y+8	; 0x08
    26a0:	df 80       	ldd	r13, Y+7	; 0x07
    26a2:	ee 80       	ldd	r14, Y+6	; 0x06
    26a4:	fd 80       	ldd	r15, Y+5	; 0x05
    26a6:	0c 81       	ldd	r16, Y+4	; 0x04
    26a8:	1b 81       	ldd	r17, Y+3	; 0x03
    26aa:	aa 81       	ldd	r26, Y+2	; 0x02
    26ac:	b9 81       	ldd	r27, Y+1	; 0x01
    26ae:	ce 0f       	add	r28, r30
    26b0:	d1 1d       	adc	r29, r1
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	ed 01       	movw	r28, r26
    26be:	08 95       	ret

000026c0 <_exit>:
    26c0:	f8 94       	cli

000026c2 <__stop_program>:
    26c2:	ff cf       	rjmp	.-2      	; 0x26c2 <__stop_program>
